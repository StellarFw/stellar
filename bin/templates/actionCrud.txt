'use strict'

module.exports = [ {
    name: 'create{{modelNameCapitalize}}',
    description: 'Create a new {{modelNameCapitalize}}',

    inputs: {},

    run: (api, action, next) => {
        // create a new model instance
        var newModel = new (api.models.get('{{modelName}}'))(action.params.{{modelName}})

        // save it
        newModel.save(err => {
            if (err) {
                // return an error message to the client
                next(new Error('We can create that resource!'))
                return
            }

            // append the new model on the response object
            action.response.{{modelName}} = newModel

            // finish the action execution
            next()
        })
    }
}, {
    name: 'get{{modelNameCapitalize}}s',
    description: 'Get all {{modelNameCapitalize}}s',

    run: (api, action, next) => {
        api.models.get('{{modelName}}').find({}, (err, resources) => {
            action.response.{{modelName}}s = resources
            next()
        })
    }
}, {
    name: 'get{{modelNameCapitalize}}',
    description: 'Get a {{modelNameCapitalize}}',

    inputs: {
        id: {required: true}
    },

    run: (api, action, next) => {
        // search for the request post on the DB
        api.models.get('{{modelName}}').findById(action.params.id, (err, resource) => {
            // put model information in response object
            action.response.{{modelNameCapitalize}} = resource

            // finish the action execution
            next()
        })
    }
}, {
    name: 'edit{{modelNameCapitalize}}',
    description: 'Edit a {{modelNameCapitalize}}',

    inputs: {
        id: {required: true}
    },

    run: (api, action, next) => {
        // search for the {{modelNameCapitalize}} and update it
        api.models.get('{{modelName}}').findOneAndUpdate({_id: action.params.id}, action.params.{{modelName}}, {upsert: true}, (err, model) => {
            if (err) {
                // return an error message to the client
                next(new Error('We could not find the resource you were looking for'))
                return
            }

            // put the updated model on the response object
            action.response.{{modelName}} = model

            // finish the action execution
            next()
        })
    }
}, {
    name: 'remove{{modelNameCapitalize}}',
    description: 'Remove a {{modelNameCapitalize}}',

    inputs: {
        id: {required: true}
    },

    run: (api, action, next) => {
        // search and remove the model
        api.models.get('{{modelName}}').findByIdAndRemove(action.params.id, err => {
            if (err) {
                  // return an error message to the client
                  next(new Error('We could not remove the requested resource'))
                  return
              }

              // finish the action execution
              next()
        })
    }
} ]
