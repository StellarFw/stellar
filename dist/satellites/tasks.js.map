{"version":3,"sources":["satellites/tasks.js"],"names":[],"mappings":"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","file":"satellites/tasks.js","sourcesContent":["import async from 'async'\nimport Utils from '../utils'\n\nclass TaskSatellite {\n\n  /**\n   * API reference object.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Map with the registered tasks.\n   *\n   * @type {{}}\n   */\n  tasks = {}\n\n  /**\n   * Map with the jobs.\n   *\n   * @type {Map}\n   */\n  jobs = {}\n\n  /**\n   * Create a new TaskSatellite instance and save the API object.\n   *\n   * @param api   API reference object.\n   */\n  constructor (api) { this.api = api }\n\n  /**\n   * Load a task file intro the task manager.\n   *\n   * @param fullFilePath  Full task file path.\n   * @param reload        This should be true is a reload.\n   */\n  loadFile (fullFilePath, reload = false) {\n    let self = this\n\n    // function to be used to log the task (re)load\n    let loadMessage = (loadedTasksName) => {\n      let reloadWord = reload ? '(re)' : ''\n      self.api.log(`task ${reloadWord}loaded: ${loadedTasksName}, ${fullFilePath}`, 'debug')\n    }\n\n    // start watch for file changes\n    self.api.configs.watchFileAndAct(fullFilePath, () => self.loadFile(fullFilePath, true))\n\n    // temporary task info\n    let task = null\n\n    try {\n      // get task collection\n      let collection = require(fullFilePath)\n\n      // iterate all collections\n      for (let i in collection) {\n        // get task logic\n        task = collection[ i ]\n\n        // create a new task entry\n        self.tasks[ task.name ] = task\n\n        // validate task\n        if (self._validateTask(self.tasks[ task.name ]) === false) { return }\n\n        // create a job wrapper on the new task\n        self.jobs[ task.name ] = self._jobWrapper(task.name)\n\n        // log the load message\n        loadMessage(task.name)\n      }\n    } catch (err) {\n      api.log(`[TaskSatellite::loadFile] ${err}`)\n\n      // handle the exception\n      self.api.exceptionHandlers.loader(fullFilePath, err)\n\n      // remove the task if that exists\n      delete self.tasks[ task.name ]\n      delete self.jobs[ task.name ]\n    }\n  }\n\n  /**\n   * Wrapper the task in a job.\n   *\n   * @param taskName  Task name.\n   * @returns {{plugins: (Array|*), pluginsOptions: (*|Array), perform: (function())}}\n   * @private\n   */\n  _jobWrapper (taskName) {\n    let self = this\n\n    // get task object\n    let task = self.tasks[ taskName ]\n\n    // get tasks plugins\n    let plugins = task.plugins || []\n\n    // get plugin options\n    let pluginOptions = task.pluginOptions || []\n\n    // check if the task uses some kind of plugins\n    if (task.frequency > 0) {\n      if (plugins.indexOf('jobLock') < 0) { plugins.push('jobLock') }\n      if (plugins.indexOf('queueLock') < 0) { plugins.push('queueLock') }\n      if (plugins.indexOf('delayQueueLock') < 0) { plugins.push('delayQueueLock') }\n    }\n\n    return {\n      plugins: plugins,\n      pluginsOptions: pluginOptions,\n      perform: function () {\n        // get the task arguments\n        let args = Array.prototype.slice.call(arguments)\n\n        // get the callback function\n        let cb = args.pop()\n\n        // if there is no arguments\n        if (args.length == 0) { args.push({}) }\n\n        // enqueue the task again\n        args.push((error, resp) => {\n          self.enqueueRecurrentJob(taskName, () => {\n            cb(error, resp)\n          })\n        })\n\n        // add the API object at the begin of the arguments array\n        args.unshift(self.api)\n\n        // execute the task\n        self.tasks[ taskName ].run.apply(self, args)\n      }\n    }\n  }\n\n  /**\n   * Validate a task.\n   *\n   * For the task to be valid it must contain the follow properties:\n   *  - name\n   *  - description\n   *  - frequency\n   *  - queue\n   *  - run\n   *\n   * @param task\n   * @returns {boolean}\n   * @private\n   */\n  _validateTask (task) {\n    let self = this\n\n    // function to be executed in case of the task validation fails\n    let fail = msg => self.api.log(`${msg}; exiting`, 'emerg')\n\n    if (typeof task.name !== 'string' || task.name.length < 1) {\n      fail(`a task is missing 'task.name'`)\n      return false\n    } else if (typeof task.description !== 'string' || task.description.length < 1) {\n      fail(`Task ${task.name} is missing 'task.description'`)\n      return false\n    } else if (typeof task.frequency !== 'number') {\n      fail(`Task ${task.name} has no frequency`)\n      return false\n    } else if (typeof task.queue !== 'string') {\n      fail(`Task ${task.name} has no queue`)\n      return false\n    } else if (typeof task.run !== 'function') {\n      fail(`Task ${task.name} has no run method`)\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Load all modules tasks.\n   *\n   * Iterate all active modules to load their tasks, if exists.\n   */\n  loadModulesTasks () {\n    let self = this\n\n    // get all active modules\n    self.api.modules.modulesPaths.forEach(modulePath => {\n      // build the task folder path for the current module\n      let tasksFolder = `${modulePath}/tasks`\n\n      // load task files\n      Utils.recursiveDirectoryGlob(tasksFolder).forEach(f => self.loadFile(f))\n    })\n  }\n\n  // -------------------------------------------------------------------------------------------- [ways to queue a task]\n\n  enqueue (taskName, params, queue, callback) {\n    let self = this\n\n    if (typeof queue === 'function' && callback === undefined) {\n      callback = queue\n      queue = self.tasks[ taskName ].queue\n    } else if (typeof params === 'function' && callback === undefined && queue === undefined) {\n      callback = params\n      queue = self.tasks[ taskName ].queue\n      params = {}\n    }\n\n    self.api.resque.queue.enqueue(queue, taskName, params, callback)\n  }\n\n  enqueueAt (timestamp, taskName, params, queue, callback) {\n    let self = this\n\n    if (typeof queue === 'function' && callback === undefined) {\n      callback = queue;\n      queue = this.tasks[ taskName ].queue;\n    }\n    else if (typeof params === 'function' && callback === undefined && queue === undefined) {\n      callback = params;\n      queue = this.tasks[ taskName ].queue;\n      params = {};\n    }\n    self.api.resque.queue.enqueueAt(timestamp, queue, taskName, params, callback);\n  }\n\n  enqueueIn (time, taskName, params, queue, callback) {\n    let self = this\n\n    if (typeof queue === 'function' && callback === undefined) {\n      callback = queue;\n      queue = self.tasks[ taskName ].queue;\n    } else if (typeof params === 'function' && callback === undefined && queue === undefined) {\n      callback = params;\n      queue = self.tasks[ taskName ].queue;\n      params = {};\n    }\n\n    self.api.resque.queue.enqueueIn(time, queue, taskName, params, callback);\n  }\n\n  del (q, taskName, args, count, callback) {\n    let self = this\n    self.api.resque.queue.del(q, taskName, args, count, callback)\n  }\n\n  delDelayed (q, taskName, args, callback) {\n    let self = this\n    self.api.resque.queue.delDelayed(q, taskName, args, callback)\n  }\n\n  scheduledAt (q, taskName, args, callback) {\n    let self = this\n    self.api.resque.queue.scheduledAt(q, taskName, args, callback)\n  }\n\n  locks (callback) {\n    let self = this\n    self.api.resque.queue.locks(callback)\n  }\n\n  delLock (lock, callback) {\n    let self = this\n    self.api.resque.queue.delLock(lock, callback)\n  }\n\n  timestamps (callback) {\n    let self = this\n    self.api.resque.queue.timestamps(callback)\n  }\n\n  delayedAt (timestamp, callback) {\n    let self = this\n    self.api.resque.queue.delayedAt(timestamp, callback)\n  }\n\n  allDelayed (callback) {\n    let self = this\n    self.api.resque.queue.allDelayed(callback)\n  }\n\n  workers (callback) {\n    let self = this\n    self.api.resque.queue.workers(callback)\n  }\n\n  workingOn (workerName, queues, callback) {\n    let self = this\n    self.api.resque.queue.workingOn(workerName, queues, callback)\n  }\n\n  allWorkingOn (callback) {\n    let self = this\n    self.api.resque.queue.allWorkingOn(callback)\n  }\n\n  failedCount (callback) {\n    let self = this\n    self.api.resque.queue.failedCount(callback)\n  }\n\n  failed (start, stop, callback) {\n    let self = this\n    self.api.resque.queue.failed(start, stop, callback)\n  }\n\n  removeFailed (failedJob, callback) {\n    let self = this\n    self.api.resque.queue.removeFailed(failedJob, callback)\n  }\n\n  retryAndRemoveFailed (failedJob, callback) {\n    let self = this\n    self.api.resque.queue.retryAndRemoveFailed(failedJob, callback)\n  }\n\n  cleanOldWorkers (age, callback) {\n    let self = this\n    self.api.resque.queue.cleanOldWorkers(age, callback)\n  }\n\n  /**\n   * Enqueue recurrent job.\n   *\n   * @param taskName Task's name.\n   * @param callback Callback function.\n   */\n  enqueueRecurrentJob (taskName, callback) {\n    let self = this\n\n    // get task object\n    let task = self.tasks[ taskName ]\n\n    // if it isn't a periodic task execute the callback function and return\n    if (task.frequency <= 0) {\n      callback()\n      return\n    }\n\n    self.del(task.queue, taskName, {}, () => {\n      self.delDelayed(task.queue, taskName, {}, () => {\n        self.enqueueIn(task.frequency, taskName, () => {\n          self.api.log(`re-enqueued recurrent job ${taskName}`, self.api.config.tasks.schedulerLogging.reEnqueue);\n          callback()\n        })\n      })\n    })\n  }\n\n  /**\n   * Enqueue all the recurrent jobs.\n   *\n   * @param callback  Callback function.\n   */\n  enqueueAllRecurrentJobs (callback) {\n    let self = this\n    let jobs = []\n    let loadedTasks = []\n\n    Object.keys(self.tasks).forEach(taskName => {\n      // get task object\n      let task = self.tasks[ taskName ]\n\n      if (task.frequency > 0) {\n        jobs.push(done => {\n          self.enqueue(taskName, (error, toRun) => {\n            if (error) { return done(error) }\n            if (toRun === true) {\n              self.api.log(`enqueuing periodic task ${taskName}`, self.api.config.tasks.schedulerLogging.enqueue)\n              loadedTasks.push(taskName)\n            }\n\n            return done()\n          })\n        })\n      }\n    })\n\n    async.series(jobs, error => {\n      if (error) { return callback(error) }\n      return callback(null, loadedTasks)\n    })\n  }\n\n  /**\n   * Remove a recurrent task from the queue.\n   *\n   * @param taskName  Task's name to be removed.\n   * @param callback  Callback function.\n   */\n  stopRecurrentJob (taskName, callback) {\n    let self = this\n    let task = self.tasks[ taskName ]\n\n    // if isn't a recurrent task execute the callback and return\n    if (task.frequency <= 0) {\n      callback()\n      return\n    }\n\n    let removedCount = 0\n\n    // remove the task from the recurrent queue\n    self.del(task.queue, task.name, {}, 1, (err, count) => {\n      removedCount = removedCount + count\n      self.delDelayed(task.queue, task.name, {}, (err, timestamps) => {\n        removedCount = removedCount + timestamps.length\n        callback(err, removedCount)\n      })\n    })\n  }\n\n  /**\n   * Get the current task queue state.\n   *\n   * @param callback  Callback function.\n   */\n  details (callback) {\n    let self = this\n\n    let result = {'queues': {}, 'workers': {}}\n    let jobs = []\n\n    // push all the workers to the result var\n    jobs.push(done => {\n      self.api.tasks.allWorkingOn((error, workers) => {\n        if (error) { return done(error) }\n        result.workers = workers\n      })\n    })\n\n    // push all the queue to the result var\n    jobs.push(done => {\n      self.api.resque.queue.queues((error, queues) => {\n        if (error) { return done(error) }\n        let queueJobs = []\n\n        queues.forEach(queue => {\n          queueJobs.push(qDone => {\n            self.resque.queue.length(queue, (error, length) => {\n              if (error) { return qDone(error) }\n              result.queues[ queue ] = {length: length}\n              return qDone()\n            })\n          })\n        })\n\n        async.series(queueJobs, done)\n      })\n    })\n\n    async.series(jobs, callback)\n  }\n\n}\n\n/**\n * This loads the task features to the API object.\n */\nexport default class {\n\n  /**\n   * Satellite load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 699\n\n  /**\n   * Satellite start priority.\n   *\n   * @type {number}\n   */\n  startPriority = 900\n\n  /**\n   * Load the logic intro the API object.\n   *\n   * @param api   API reference.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // load task features to the API object\n    api.tasks = new TaskSatellite(api)\n\n    // load modules tasks\n    api.tasks.loadModulesTasks()\n\n    // finish the satellite initialization\n    next()\n  }\n\n  /**\n   * Satellite start function.\n   *\n   * @param api   API object reference.\n   * @param next  Callback function.\n   */\n  start (api, next) {\n    if (api.config.tasks.scheduler === true) {\n      api.tasks.enqueueAllRecurrentJobs((error) => next(error))\n    } else {\n      next()\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}