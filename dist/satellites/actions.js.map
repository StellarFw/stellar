{"version":3,"sources":["satellites/actions.js"],"names":[],"mappings":"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","file":"satellites/actions.js","sourcesContent":["// initializer modules\nimport Utils from '../utils'\n\n/**\n * This class manage all actions.\n */\nclass Actions {\n\n  /**\n   * API reference.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Hash map with the registered actions.\n   *\n   * @type {{}}\n   */\n  actions = {}\n\n  /**\n   * Separate actions by version.\n   *\n   * @type {{}}\n   */\n  versions = {}\n\n  /**\n   * Hash map with the middleware by actions.\n   *\n   * @type {{}}\n   */\n  middleware = {}\n\n  /**\n   * Global middleware.\n   *\n   * @type {Array}\n   */\n  globalMiddleware = []\n\n  /**\n   * Create a new actions manager instance.\n   *\n   * @param api\n   */\n  constructor (api) { this.api = api }\n\n  /**\n   * Execute an action.\n   *\n   * This allow developers call actions internally.\n   *\n   * @param actionName  Name of the action to be called.\n   * @param params      Action parameters.\n   * @param callback    Callback function.\n   */\n  call (actionName, params, callback) {\n    let self = this\n\n    // create a new connection object\n    let connection = new self.api.connection(self.api, {\n      type: 'internal',\n      remotePort: 0,\n      remoteIP: 0,\n      rawConnection: {}\n    })\n\n    // set connection params\n    connection.params = params\n\n    // set action who must be called\n    connection.params.action = actionName\n\n    // create a new ActionProcessor instance\n    let actionProcessor = new self.api.actionProcessor(self.api, connection, data => {\n      // execute the callback on the connection destroy event\n      connection.destroy(() => callback(data.response.error, data.response))\n    })\n\n    // process the action\n    actionProcessor.processAction()\n  }\n\n  /**\n   * This loads some system action.\n   *\n   * Available action:\n   *  - status: give information about the name and the server status.\n   */\n  loadSystemActions () {\n    let self = this\n\n    // only load this if the system actions are enabled\n    //\n    // @see api.configs.enableSystemActions\n    if (self.api.config.enableSystemActions !== true) { return }\n\n    // add an action to give some information about the server status\n    self.versions.status = [ 1 ]\n    self.actions.status = {\n      '1': {\n        name: 'status',\n        description: 'Is a system action to show the server status',\n        run: (api, action, next) => {\n\n          // finish the action execution\n          next()\n        }\n      }\n    }\n  }\n\n  /**\n   * Load a new action file.\n   *\n   * @param fullFilePath\n   * @param reload\n   */\n  loadFile (fullFilePath, reload = false) {\n    let self = this\n\n    let loadMessage = action => {\n      let level = reload ? 'info' : 'debug'\n      let msg = null\n\n      if (reload) {\n        msg = `action (re)loaded: ${action.name} @ v${action.version}, ${fullFilePath}`\n      } else {\n        msg = `action loaded: ${action.name} @ v${action.version}, ${fullFilePath}`\n      }\n\n      self.api.log(msg, level)\n    }\n\n    // watch for changes on the action file\n    self.api.configs.watchFileAndAct(fullFilePath, () => {\n      self.loadFile(fullFilePath, true)\n      self.api.params.buildPostVariables()\n      self.api.routes.loadRoutes()\n    });\n\n    let action = null\n\n    // try load the action\n    try {\n      // load action file\n      let collection = require(fullFilePath)\n\n      // iterate all collection definitions\n      for (let i in collection) {\n        // get action object\n        action = collection[ i ]\n\n        // if there is no version defined set it to 1.0\n        if (action.version === null || action.version === undefined) { action.version = 1.0 }\n\n        // if the action not exists create a new entry on the hash map\n        if (self.actions[ action.name ] === null || self.actions[ action.name ] === undefined) {\n          self.actions[ action.name ] = {}\n        }\n\n        // if the action exists and are protected return now\n        if (self.actions[ action.name ][ action.version ] !== undefined &&\n          self.actions[ action.name ][ action.version ].protected !== undefined &&\n          self.actions[ action.name ][ action.version ].protected === true) {\n          return\n        }\n\n        // put the action on correct version slot\n        self.actions[ action.name ][ action.version ] = action;\n        if (self.versions[ action.name ] === null || self.versions[ action.name ] === undefined) {\n          self.versions[ action.name ] = []\n        }\n        self.versions[ action.name ].push(action.version);\n        self.versions[ action.name ].sort()\n\n        // validate the action data\n        self.validateAction(self.actions[ action.name ][ action.version ])\n\n        // send a log message\n        loadMessage(action)\n      }\n    } catch (err) {\n      try {\n        self.api.exceptionHandlers.loader(fullFilePath, err)\n        delete self.actions[ action.name ][ action.version ]\n      } catch (err2) {\n        throw err\n      }\n    }\n  }\n\n  /**\n   * Validate some action requirements.\n   *\n   * @param action  Action object to be validated.\n   */\n  validateAction (action) {\n    let self = this\n\n    // fail function\n    let fail = msg => self.api.log(msg, 'error')\n\n    // initialize inputs property\n    if (action.inputs === undefined) { action.inputs = {} }\n\n    // initialize private property\n    if (action.private === undefined) { action.private = false }\n\n    // initialize protected property\n    if (action.protected === undefined) { action.protected = false }\n\n    // the name, description, run properties are required\n    if (typeof action.name !== 'string' || action.name.length < 1) {\n      fail(`an action is missing 'action.name'`)\n      return false\n    } else if (typeof action.description !== 'string' || action.description.length < 1) {\n      fail(`Action ${action.name} is missing 'action.description'`)\n      return false\n    } else if (typeof action.run !== 'function') {\n      fail(`Action ${action.run} has no run method`)\n      return false\n    } else if (self.api.connections !== null && self.api.connections.allowedVerbs.indexOf(action.name) >= 0) {\n      fail(`${action.run} is a reserved verb for connections. Choose a new name`)\n      return false\n    } else {\n      return true\n    }\n  }\n\n  /**\n   * Add a new middleware.\n   *\n   * @param data  Middleware to be added.\n   */\n  addMiddleware (data) {\n    let self = this\n\n    // middleware require a name\n    if (!data.name) { throw new Error('middleware.name is required')}\n\n    // if there is no defined priority use the default\n    if (!data.priority) { data.priority = self.api.config.general.defaultMiddlewarePriority }\n\n    // ensure the priority is a number\n    data.priority = Number(data.priority)\n\n    // save the new middleware\n    self.middleware[ data.name ] = data\n\n    // if this is a local middleware return now\n    if (data.global !== true) { return }\n\n    // push the new middleware to the global list\n    self.globalMiddleware.push(data.name)\n\n    // sort the global middleware array\n    self.globalMiddleware.sort((a, b) => {\n      if (self.middleware[ a ].priority > self.middleware[ b ].priority) { return 1 }\n\n      return -1\n    })\n  }\n\n  loadMiddlewareFromFile (path, reload = false) {\n    let self = this\n\n    /**\n     * Function to log the load ou reload message\n     *\n     * @param middleware  Middleware object\n     */\n    let loadMessage = middleware => {\n      let level = reload ? 'info' : 'debug'\n      let msg = null\n\n      if (reload) {\n        msg = `middleware (re)loaded: ${middleware.name}, ${path}`\n      } else {\n        msg = `middleware loaded: ${middleware.name}, ${path}`\n      }\n\n      self.api.log(msg, level)\n    }\n\n    // watch for changes on the middleware file\n    self.api.configs.watchFileAndAct(path, () => self.loadMiddlewareFromFile(path, true))\n\n    // try load the middleware\n    try {\n      // load middleware file\n      let collection = require(path)\n\n      // iterate all collection definitions\n      for (let index in collection) {\n        // get middleware object\n        let middleware = collection[ index ]\n\n        // try load middleware object\n        self.addMiddleware(middleware)\n\n        // send a log message\n        loadMessage(middleware)\n      }\n    } catch (error) {\n      self.api.exceptionHandlers.loader(path, error)\n    }\n  }\n}\n\n/**\n * Initializer to load the actions features into the Engine.\n */\nexport default class {\n\n  /**\n   * Initializer load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 410\n\n  /**\n   * Initializer load function.\n   *\n   * @param api   API reference\n   * @param next  Callback function\n   */\n  load (api, next) {\n    // add the actions class to the api\n    api.actions = new Actions(api)\n\n    // load system actions\n    api.actions.loadSystemActions()\n\n    // iterate all modules and load all actions\n    api.modules.modulesPaths.forEach(modulePath => {\n      // load modules middleware\n      Utils.recursiveDirectoryGlob(`${modulePath}/middleware`).forEach(path => api.actions.loadMiddlewareFromFile(path))\n\n      // get all files from the module \"actions\" folder\n      Utils.recursiveDirectoryGlob(`${modulePath}/actions`).forEach(actionFile => api.actions.loadFile(actionFile))\n    })\n\n    // finish initializer loading\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}