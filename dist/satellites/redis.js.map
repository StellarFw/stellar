{"version":3,"sources":["satellites/redis.js"],"names":[],"mappings":"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","file":"satellites/redis.js","sourcesContent":["import async from 'async'\nimport uuid from 'node-uuid'\nimport Utils from '../utils'\n\n/**\n * Redis manager class.\n *\n * This creates a interface to connect with a redis server.\n */\nclass RedisManager {\n\n  /**\n   * API reference.\n   *\n   * @type {null}\n   */\n  api = null;\n\n  /**\n   * Hash with all instantiate clients.\n   *\n   * @type {{}}\n   */\n  clients = {}\n\n  /**\n   * Callbacks.\n   *\n   * @type {{}}\n   */\n  clusterCallbacks = {}\n\n  /**\n   * Cluster callback timeouts.\n   *\n   * @type {{}}\n   */\n  clusterCallbackTimeouts = {}\n\n  /**\n   * Subscription handlers.\n   *\n   * @type {{}}\n   */\n  subscriptionHandlers = {}\n\n  /**\n   * Redis manager status.\n   *\n   * @type {{subscribed: boolean}}\n   */\n  status = {\n    subscribed: false\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param api API reference.\n   */\n  constructor (api) {\n    let self = this\n\n    // save api reference object\n    self.api = api\n\n    // subscription handlers\n\n    self.subscriptionHandlers[ 'do' ] = message => {\n      if (!message.connectionId || (self.api.connections.connections[ message.connectionId ])) {\n        let cmdParts = message.method.split('.')\n        let cmd = cmdParts.shift()\n        if (cmd !== 'api') { throw new Error('cannot operate on a outside of the api object') }\n        let method = Utils.stringToHash(api, cmdParts.join('.'))\n\n        let callback = () => {\n          let responseArgs = Array.apply(null, arguments).sort()\n          process.nextTick(() => { self.respondCluster(message.requestId, responseArgs) })\n        }\n\n        let args = message.args\n        if (args === null) { args = [] }\n        if (!Array.isArray(args)) { args = [ args ] }\n        args.push(callback)\n        method.apply(null, args)\n      }\n    }\n\n    self.subscriptionHandlers[ 'doResponse' ] = message => {\n      if (self.clusterCallbacks[ message.requestId ]) {\n        clearTimeout(self.clusterCallbackTimeouts[ message.requestId ])\n        self.clusterCallbacks[ message.requestId ].apply(null, message.response)\n        delete self.clusterCallbacks[ message.requestId ]\n        delete self.clusterCallbackTimeouts[ message.requestId ]\n      }\n    }\n  }\n\n  initialize (callback) {\n    let self = this\n\n    let jobs = [];\n\n    [ 'client', 'subscriber', 'tasks' ].forEach(r => {\n      jobs.push(done => {\n        if (self.api.config.redis[ r ].buildNew === true) {\n          // get arguments\n          var args = self.api.config.redis[ r ].args\n\n          // create a new instance\n          self.clients[ r ] = new self.api.config.redis[ r ].constructor(args[ 0 ], args[ 1 ], args[ 2 ])\n\n          // on error event\n          self.clients[ r ].on('error', error => { self.api.log(`Redis connection ${r} error`, error) })\n\n          // on connect event\n          self.clients[ r ].on('connect', () => {\n            self.api.log(`Redis connection ${r} connected`, 'info')\n            done()\n          })\n        } else {\n          self.clients[ r ] = self.api.config.redis[ r ].constructor.apply(null, self.api.config.redis[ r ].args)\n          self.clients[ r ].on('error', error => { self.api.log(`Redis connection ${r} error`, 'error', error) })\n          self.api.log(`Redis connection ${r} connected`, 'info')\n          done();\n        }\n      })\n    })\n\n    if (!self.status.subscribed) {\n      jobs.push(done => {\n        // ensures that clients subscribe the default channel\n        self.clients.subscriber.subscribe(self.api.config.general.channel)\n        self.status.subscribed = true\n\n        // on 'message' event execute the handler\n        self.clients.subscriber.on('message', (messageChannel, message) => {\n          // parse the JSON message if exists\n          try {\n            message = JSON.parse(message)\n          } catch (e) {\n            message = {}\n          }\n\n          if (messageChannel === self.api.config.general.channel && message.serverToken === self.api.config.general.serverToken) {\n            if (self.subscriptionHandlers[ message.messageType ]) {\n              self.subscriptionHandlers[ message.messageType ](message)\n            }\n          }\n        })\n\n        // execute the callback\n        done()\n      })\n    }\n\n    async.series(jobs, callback)\n  }\n\n  /**\n   * Publish a payload to the redis server.\n   *\n   * @param payload Payload to be published.\n   */\n  publish (payload) {\n    let self = this\n\n    // get default Redis channel\n    let channel = self.api.config.general.channel\n\n    // publish redis message\n    self.clients.client.publish(channel, JSON.stringify(payload))\n  }\n\n  // ------------------------------------------------------------------------------------------------------------- [RPC]\n\n  doCluster (method, args, connectionId, callback) {\n    let self = this\n\n    let requestId = uuid.v4()\n    let payload = {\n      messageType: 'do',\n      serverId: self.api.id,\n      serverToken: self.api.config.general.serverToken,\n      requestId: requestId,\n      method: method,\n      connectionId: connectionId,\n      args: args\n    };\n\n    self.publish(payload)\n\n    if (typeof  callback === 'function') {\n      self.clusterCallbacks[ requestId ] = callback\n      self.clusterCallbackTimeouts[ requestId ] = setTimeout((requestId) => {\n        if (typeof self.clusterCallbacks[ requestId ] === 'function') {\n          self.clusterCallbacks[ requestId ](new Error('RPC Timeout'))\n        }\n        delete self.clusterCallbacks[ requestId ]\n        delete self.clusterCallbackTimeouts[ requestId ]\n      }, self.api.config.general.rpcTimeout, requestId)\n    }\n  }\n\n  respondCluster (requestId, response) {\n    let self = this\n\n    let payload = {\n      messageType: 'doResponse',\n      serverId: self.api.id,\n      serverToken: self.api.config.general.serverToken,\n      requestId: requestId,\n      response: response // args to pass back, including error\n    };\n\n    self.publish(payload)\n  }\n}\n\n/**\n * Redis initializer.\n */\nexport default class {\n\n  /**\n   * Initializer load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 200\n\n  /**\n   * Initializer stop priority.\n   *\n   * @type {number}\n   */\n  stopPriority = 999\n\n  /**\n   * Initializer load method.\n   *\n   * @param api   API reference.\n   * @param next  Callback\n   */\n  load (api, next) {\n    // put the redis manager available\n    api.redis = new RedisManager(api)\n\n    // initialize redis manager\n    api.redis.initialize(error => {\n      // execute the callback if exists an error\n      if (error) { return next(error) }\n\n      api.redis.doCluster('api.log', `Stellar member ${api.id} has joined the cluster`, null, null)\n\n      // finish the loading\n      process.nextTick(next)\n    })\n  }\n\n  /**\n   * Stop initializer.\n   *\n   * @param api   API reference.\n   * @param next  Callback.\n   */\n  stop (api, next) {\n    // execute all existent timeouts and remove them\n    for (let i in api.redis.clusterCallbackTimeouts) {\n      clearTimeout(api.redis.clusterCallbackTimeouts[ i ])\n      delete api.redis.clusterCallbakTimeouts[ i ]\n      delete api.redis.clusterCallbaks[ i ]\n    }\n\n    // inform the cluster of stellar leaving\n    api.redis.doCluster('api.log', `Stellar member ${api.id} has left the cluster`, null, null)\n\n    // unsubscribe stellar instance and finish the stop method execution\n    process.nextTick(() => {\n      api.redis.clients.subscriber.unsubscribe()\n      api.redis.status.subscribed = false\n      next()\n    });\n  }\n\n}\n"],"sourceRoot":"/source/"}