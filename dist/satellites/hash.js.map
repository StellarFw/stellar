{"version":3,"sources":["satellites/hash.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;;IAQM,I;;;;;;;;AAcJ,gBAAa,GAAb,EAAkB;AAAA;;AAAA,SAPlB,GAOkB,GAPZ,IAOY;AAAE,SAAK,GAAL,GAAW,GAAX;AAAgB;;;;;;;;;;;;;;;;;;;;;mCAUuB;AAAA,UAA7C,MAA6C,yDAApC,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB,UAAY;;AACzD,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,yBAAO,OAAP,CAAe,MAAf,EAAuB,UAAC,KAAD,EAAQ,IAAR;AAAA,iBAAiB,QAAQ,OAAO,KAAP,CAAR,GAAwB,QAAQ,IAAR,CAAzC;AAAA,SAAvB;AACD,OAFM,CAAP;AAGD;;;;;;;;;;uCAO6D;AAAA,UAA7C,MAA6C,yDAApC,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB,UAAY;AAAE,aAAO,iBAAO,WAAP,CAAmB,MAAnB,CAAP;AAAmC;;;;;;;;;;;;yBAS7F,I,EAAoB;AAAA,UAAd,OAAc,yDAAJ,EAAI;;AACxB,UAAI,OAAO,IAAX;;;AAGA,UAAI,SAAS,KAAK,WAAL,CAAiB,OAAjB,CAAb;;;AAGA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,yBAAO,IAAP,CAAY,IAAZ,EAAkB,OAAO,IAAP,IAAe,OAAO,UAAxC,EAAoD,UAAC,KAAD,EAAQ,IAAR;AAAA,iBAAiB,QAAQ,OAAO,KAAP,CAAR,GAAwB,QAAQ,IAAR,CAAzC;AAAA,SAApD;AACD,OAFM,CAAP;AAGD;;;;;;;;;;;;6BASS,I,EAAoB;AAAA,UAAd,OAAc,yDAAJ,EAAI;;AAC5B,UAAI,OAAO,IAAX;;;AAGA,UAAI,SAAS,KAAK,WAAL,CAAiB,OAAjB,CAAb;;;AAGA,aAAO,iBAAO,QAAP,CAAgB,IAAhB,EAAsB,OAAO,IAAP,IAAe,OAAO,UAA5C,CAAP;AACD;;;;;;;;;;;;4BASQ,S,EAAW,I,EAAM;AACxB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,yBAAO,OAAP,CAAe,SAAf,EAA0B,IAA1B,EAAgC,UAAC,KAAD,EAAQ,KAAR;AAAA,iBAAkB,QAAQ,OAAO,KAAP,CAAR,GAAwB,QAAQ,KAAR,CAA1C;AAAA,SAAhC;AACD,OAFM,CAAP;AAGD;;;;;;;;;;;;gCASY,S,EAAW,I,EAAM;AAAE,aAAO,iBAAO,WAAP,CAAmB,SAAnB,EAA8B,IAA9B,CAAP;AAA4C;;;;;;;;;;;;;;kCAWhD;AAAA,UAAf,QAAe,yDAAJ,EAAI;;AAC1B,UAAI,OAAO,IAAX;;AAEA,aAAO,gBAAM,SAAN,CAAgB;AACrB,cAAM,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB,IADT;AAErB,oBAAY,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB,UAFf;AAGrB,oBAAY,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB;AAHf,OAAhB,EAIJ,QAJI,CAAP;AAKD;;;;;;;;;;SAWD,Y,GAAe,G;;;;;;;;;;;;;;;;;;;;yBAQT,G,EAAK,I,EAAM;;AAEf,UAAI,IAAJ,GAAW,IAAI,IAAJ,CAAS,GAAT,CAAX;;;AAGA;AACD","file":"satellites/hash.js","sourcesContent":["import bcrypt from 'bcrypt'\nimport Utils from '../utils'\n\n/**\n * This class is a wrapper for bcrypt library.\n *\n * This allow users hash data and compare plain data with\n * and hash to validate them.\n */\nclass Hash {\n\n  /**\n   * API reference object.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Create a new class instance.\n   *\n   * @param api   API object reference.\n   */\n  constructor (api) { this.api = api }\n\n  // ---------------------------------------------------------------------------------------------------------- [Public]\n\n  /**\n   * Generate new bcrypt salt\n   *\n   * @param rounds        Number of rounds\n   * @returns {Promise}\n   */\n  generateSalt (rounds = this.api.config.general.saltRounds) {\n    return new Promise((resolve, reject) => {\n      bcrypt.genSalt(rounds, (error, salt) => error ? reject(error) : resolve(salt))\n    })\n  }\n\n  /**\n   * Generate a new bcrypt salt in sync mode\n   *\n   * @param rounds  Number of rounds\n   */\n  generateSaltSync(rounds = this.api.config.general.saltRounds) { return bcrypt.genSaltSync(rounds) }\n\n  /**\n   * Hash data\n   *\n   * @param data          Data to hash\n   * @param _config       Additional configuration where you can override pre-defined config\n   * @return {Promise}\n   */\n  hash (data, _config = {}) {\n    let self = this\n\n    // build the configs object\n    let config = self._getConfigs(_config)\n\n    // create a new promise and generate the hash\n    return new Promise((resolve, reject) => {\n      bcrypt.hash(data, config.salt || config.saltLength, (error, hash) => error ? reject(error) : resolve(hash))\n    })\n  }\n\n  /**\n   * Hash data in sync mode\n   *\n   * @param data        Data to hash\n   * @param _config     Additional configuration where you can override pre-defined config\n   * @returns {String}  Returns hashed data\n   */\n  hashSync (data, _config = {}) {\n    let self = this\n\n    // build the configs object\n    let config = self._getConfigs(_config)\n\n    // hash the data with the bcrypt\n    return bcrypt.hashSync(data, config.salt || config.saltLength)\n  }\n\n  /**\n   * Compare hash with plain data\n   *\n   * @param plainData     Plain data\n   * @param hash          Hash to compare with\n   * @returns {Promise}\n   */\n  compare (plainData, hash) {\n    return new Promise((resolve, reject) => {\n      bcrypt.compare(plainData, hash, (error, equal) => error ? reject(error) : resolve(equal))\n    })\n  }\n\n  /**\n   * Compare data with hash in sync mode\n   *\n   * @param plainData     Plain data\n   * @param hash          Hash to compare with\n   * @returns {Boolean}   Returns true if equal\n   */\n  compareSync (plainData, hash) { return bcrypt.compareSync(plainData, hash) }\n\n  // --------------------------------------------------------------------------------------------------------- [Private]\n\n  /**\n   * Get configs to be used on the generation.\n   *\n   * @param _configs  User defined configs\n   * @returns {{}}\n   * @private\n   */\n  _getConfigs (_configs = {}) {\n    let self = this\n\n    return Utils.hashMerge({\n      salt: self.api.config.general.salt,\n      saltRounds: self.api.config.general.saltRounds,\n      saltLength: self.api.config.general.saltLength\n    }, _configs)\n  }\n\n}\n\nexport default class {\n\n  /**\n   * Satellite load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 400\n\n  /**\n   * Satellite loading function.l\n   *\n   * @param api     API reference object\n   * @param next    Callback function\n   */\n  load (api, next) {\n    // put the hash functions available to everyone\n    api.hash = new Hash(api)\n\n    // finish the satellite loading\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}