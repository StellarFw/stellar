{"version":3,"sources":["satellites/documentation.js"],"names":[],"mappings":"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","file":"satellites/documentation.js","sourcesContent":["import fs from 'fs'\nimport Utils from '../utils'\nimport Handlebars from 'handlebars'\n\nclass DocumentationGenerator {\n\n  /**\n   * API reference object.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Docs folder path.\n   *\n   * @type {string}\n   */\n  docsFolder = ''\n\n  /**\n   * Static folder path.\n   *\n   * @type {string}\n   */\n  staticFolder = ''\n\n  /**\n   * Constructor.\n   *\n   * @param api\n   */\n  constructor (api) {\n    let self = this\n\n    // save API reference object\n    self.api = api\n\n    // unsure the public folder exists\n    Utils.createFolder(self.api.config.general.paths.public)\n\n    // build docs folder path\n    self.docsFolder = `${self.api.config.general.paths.public}/docs`\n\n    // build static folder path\n    self.staticFolder = `${__dirname}/../../staticFiles/docs`\n  }\n\n  /**\n   * Get all actions who have toDocument different than false.\n   *\n   * @returns {{}}  Actions to generate documentation.\n   * @private\n   */\n  _getActionToGenerateDoc () {\n    let self = this\n\n    // array to store the actions\n    let actions = {}\n\n    // iterate all actions\n    for (let actionName in self.api.actions.actions) {\n      let count = 0\n\n      actions[ actionName ] = {}\n\n      // iterate all action versions\n      for (let versionNumber in self.api.actions.actions[ actionName ]) {\n        if (self.api.actions.actions[ actionName ][ versionNumber ].toDocument !== false) {\n          count++\n          actions[ actionName ][ versionNumber ] = self.api.actions.actions[ actionName ][ versionNumber ]\n        }\n      }\n\n      if (count === 0) { delete actions[ actionName ] }\n    }\n\n    return actions\n  }\n\n  /**\n   * Generate the documentation.\n   */\n  generateDocumentation () {\n    let self = this\n\n    // remove docs directory\n    Utils.removeDirectory(self.docsFolder)\n\n    // create the directory again\n    Utils.createFolder(self.docsFolder)\n\n    // get actions to generate documentation\n    let actions = self._getActionToGenerateDoc()\n\n    // object with the template data\n    let data = {actions: Object.keys(actions)}\n\n    // get base template\n    let source = fs.readFileSync(`${self.staticFolder}/action.html`).toString()\n\n    // iterate all loaded actions\n    for (let actionName in actions) {\n      // set action name\n      data.actionName = actionName\n\n      // initialize array\n      data.actionVersions = []\n\n      // iterate all versions\n      for (let versionNumber in actions[ actionName ]) {\n        // get action object\n        let action = self._prepareActionToPrint(actions[ actionName ][ versionNumber ])\n\n        // push the version number\n        action.version = versionNumber\n\n        // push the new action to the actionVersions array\n        data.actionVersions.push(action)\n      }\n\n      // build the template\n      let template = Handlebars.compile(source)\n\n      // output the result to the temp folder\n      fs.writeFileSync(`${self.docsFolder}/action_${actionName}.html`, template(data), 'utf8')\n    }\n\n    // build the index.html\n    self._buildIndexFile()\n\n    // copy resource files\n    this._copyResourceFiles()\n  }\n\n  /**\n   * Build the index.html file.\n   *\n   * @private\n   */\n  _buildIndexFile () {\n    let self = this\n\n    // build data object\n    let data = {\n      actions: Object.keys(self._getActionToGenerateDoc()),\n      project: {}\n    }\n    data.project.name = self.api.config.name\n    data.project.description = self.api.config.description\n    data.project.version = self.api.config.version\n\n    // get template source\n    let source = fs.readFileSync(`${self.staticFolder}/index.html`).toString()\n\n    // compile source\n    let template = Handlebars.compile(source)\n\n    // save index.html file on final docs folder\n    fs.writeFileSync(`${self.docsFolder}/index.html`, template(data), 'utf8')\n  }\n\n  /**\n   * Prepare the action to be printed.\n   *\n   * @param action\n   * @returns {{}}\n   * @private\n   */\n  _prepareActionToPrint (action) {\n    // create a new object with the data prepared to be printed\n    let output = {}\n\n    // action name\n    output.name = action.name\n\n    // action description\n    output.description = action.description\n\n    // action output example\n    if (action.outputExample !== undefined) {\n      output.outputExample = JSON.stringify(action.outputExample, null, 4)\n    }\n\n    // action inputs\n    if (action.inputs !== undefined) {\n      output.inputs = []\n\n      // iterate all inputs\n      Object.keys(action.inputs).forEach(inputName => {\n        let newInput = {}\n        let input = action.inputs[ inputName ]\n\n        newInput.name = inputName\n        newInput.description = input.description || 'N/A'\n        newInput.default = input.default || 'N/A'\n\n        newInput.validators = []\n\n        if (!(input.required === undefined || input.required === false)) {\n          newInput.validators.push({type: 'required', value: 'required'})\n        }\n\n        // validators\n        if (typeof input.validator === 'function') {\n          newInput.validators.push({type: 'function', value: 'function'})\n        } else if (input.validator instanceof RegExp) {\n          newInput.validators.push({type: 'regex', value: String(input.validator)})\n        } else if (typeof input.validator === 'string') {\n          // the validator string can have many validators separated by '|', we need to split them\n          let validators = input.validator.split('|')\n\n          for (let index in validators) {\n            newInput.validators.push({type: 'validator', value: validators[ index ]})\n          }\n        }\n\n        // push the new input\n        output.inputs.push(newInput)\n      })\n    }\n\n    return output\n  }\n\n  /**\n   * Copy resource files to final docs folder.\n   *\n   * @private\n   */\n  _copyResourceFiles () {\n    let self = this\n    Utils.copyFile(`${self.staticFolder}/reset.css`, `${self.docsFolder}/reset.css`)\n    Utils.copyFile(`${self.staticFolder}/style.css`, `${self.docsFolder}/style.css`)\n    Utils.copyFile(`${self.staticFolder}/highlight.js`, `${self.docsFolder}/highlight.js`)\n  }\n\n}\n\n/**\n * This satellite is responsible to generate the documentation\n * for all project actions.\n */\nexport default class {\n\n  /**\n   * Satellite load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 510\n\n  /**\n   * Satellite loading function.\n   *\n   * @param api   API reference object.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // if the documentation generation was disabled finish now\n    if (api.config.general.generateDocumentation !== true) {\n      next()\n      return\n    }\n\n    // build the documentation\n    (new DocumentationGenerator(api)).generateDocumentation()\n\n    // finish the satellite loading\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}