{"version":3,"sources":["satellites/events.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;;;;IAUM,a;;;;;;;;;;;;;;;AAqBJ,yBAAa,GAAb,EAAkB;AAAA;;AAAA,SAdlB,GAckB,GAdZ,IAcY;AAAA,SAPlB,MAOkB,GAPT,IAAI,GAAJ,EAOS;AAAE,SAAK,GAAL,GAAW,GAAX;AAAgB;;;;;;;;;;;;;;;;;;;;;;yBAW9B,S,EAAW,I,EAAuB;AAAA,UAAjB,QAAiB,yDAAN,IAAM;;AACtC,UAAI,OAAO,IAAX;;;AAGA,UAAI,eAAe,IAAnB;;;AAGA,UAAI,KAAK,MAAL,CAAY,GAAZ,CAAgB,SAAhB,CAAJ,EAAgC;;AAE9B,wBAAM,IAAN,CAAW,KAAK,MAAL,CAAY,GAAZ,CAAgB,SAAhB,CAAX,EAAuC,UAAC,QAAD,EAAW,QAAX;AAAA,iBAAwB,SAAS,GAAT,CAAa,KAAK,GAAlB,EAAuB,YAAvB,EAAqC,QAArC,CAAxB;AAAA,SAAvC,EAA+G,YAAM;;AAEnH,cAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAAE,mBAAO,SAAS,YAAT,CAAP;AAA+B;AACtE,SAHD;;AAKA;AACD;;;AAGD,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAAE,eAAO,SAAS,YAAT,CAAP;AAA+B;AACtE;;;;;;;;;;;;;;6BAWS,K,EAAO,E,EAAI,Q,EAAU;AAC7B,UAAI,OAAO,IAAX;;;AAGA,UAAI,WAAW;AACb,eAAO,KADM;AAEb,aAAK,EAFQ;AAGb,kBAAU;AAHG,OAAf;;;AAOA,WAAK,YAAL,CAAkB,QAAlB;AACD;;;;;;;;;;;;;iCAUa,W,EAAa;AACzB,UAAI,OAAO,IAAX;;;AAGA,UAAI,YAAY,KAAZ,KAAsB,SAA1B,EAAqC;AACnC,aAAK,GAAL,CAAS,GAAT,CAAa,uCAAb,EAAsD,SAAtD;AACA,eAAO,KAAP;AACD;;;AAGD,UAAI,YAAY,GAAZ,KAAoB,SAApB,IAAiC,OAAO,YAAY,GAAnB,KAA2B,UAAhE,EAA4E;AAC1E,aAAK,GAAL,CAAS,GAAT,CAAa,2DAAb,EAA0E,SAA1E;AACA,eAAO,KAAP;AACD;;;AAGD,UAAI,YAAY,QAAZ,KAAyB,SAA7B,EAAwC;AAAE,oBAAY,QAAZ,GAAuB,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB,uBAA/C;AAAwE;;;;AAIlH,UAAI,CAAC,KAAK,MAAL,CAAY,GAAZ,CAAgB,YAAY,KAA5B,CAAL,EAAyC;AAAE,aAAK,MAAL,CAAY,GAAZ,CAAgB,YAAY,KAA5B,EAAmC,EAAnC;AAAwC;;;AAGnF,UAAI,YAAY,KAAK,MAAL,CAAY,GAAZ,CAAgB,YAAY,KAA5B,CAAhB;;;AAGA,gBAAU,IAAV,CAAe,WAAf;;;AAGA,gBAAU,IAAV,CAAe,UAAC,EAAD,EAAK,EAAL;AAAA,eAAY,GAAG,QAAH,GAAc,GAAG,QAA7B;AAAA,OAAf;;AAEA,aAAO,IAAP;AACD;;;;;;;;;;;;kCASc,I,EAAM;AACnB,UAAI,OAAO,IAAX;;;AAGA,WAAK,GAAL,CAAS,OAAT,CAAiB,YAAjB,CAA8B,OAA9B,CAAsC,sBAAc;;AAElD,YAAI,sBAAyB,UAAzB,eAAJ;;;AAGA,YAAI,CAAC,gBAAM,eAAN,CAAsB,mBAAtB,CAAL,EAAiD;AAAE;AAAQ;;;AAG3D,wBAAM,sBAAN,CAA6B,mBAA7B,EAAkD,IAAlD,EAAwD,OAAxD,CAAgE,wBAAgB;;AAE9E,cAAI,aAAa,QAAQ,YAAR,CAAjB;;AAEA,eAAK,IAAI,CAAT,IAAc,UAAd,EAA0B;;AAExB,gBAAI,WAAW,WAAY,CAAZ,CAAf;;;AAGA,iBAAK,YAAL,CAAkB,QAAlB;AACD;AACF,SAXD;AAYD,OApBD;;;AAuBA;AACD;;;;;;;;;;;;;;;SAcD,Y,GAAe,G;;;;;;;;;;;;;;;;;;;;yBAQT,G,EAAK,I,EAAM;;AAEf,UAAI,MAAJ,GAAa,IAAI,aAAJ,CAAkB,GAAlB,CAAb;;;AAGA,UAAI,MAAJ,CAAW,aAAX,CAAyB,IAAzB;AACD","file":"satellites/events.js","sourcesContent":["import async from 'async'\nimport Utils from '../utils'\n\n/**\n * Class to manage events.\n *\n * The developers can use this to manipulate data during the\n * execution or to extend functionalities adding new behaviours\n * to existing logic. The listeners must be stored in\n * <moduleName>/listeners.\n */\nclass EventsManager {\n\n  /**\n   * API reference object.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Map with all registered events and listeners.\n   *\n   * @type {Map}\n   */\n  events = new Map()\n\n  /**\n   * Create a new instance.\n   *\n   * @param api   API reference object.\n   */\n  constructor (api) { this.api = api }\n\n  // -------------------------------------------------------------------------------------------------------- [Commands]\n\n  /**\n   * Fire an event.\n   *\n   * @param eventName   Event to fire.\n   * @param data        Params to pass to the listeners.\n   * @param callback    Callback function.\n   */\n  fire (eventName, data, callback = null) {\n    let self = this\n\n    // variable to store listener response data\n    let responseData = data\n\n    // check if exists listeners for this event\n    if (self.events.has(eventName)) {\n      // execute the listeners async in series\n      async.each(self.events.get(eventName), (listener, callback) => listener.run(self.api, responseData, callback), () => {\n        // execute the callback function\n        if (typeof callback === 'function') { return callback(responseData) }\n      })\n\n      return\n    }\n\n    // execute the callback function\n    if (typeof callback === 'function') { return callback(responseData) }\n  }\n\n  /**\n   * Register a new listener for an event.\n   *\n   * Build the new listener object.\n   *\n   * @param event     Event name.\n   * @param fn        Listener handler.\n   * @param priority  Priority.\n   */\n  listener (event, fn, priority) {\n    let self = this\n\n    // build a listener object\n    let listener = {\n      event: event,\n      run: fn,\n      priority: priority\n    }\n\n    // insert the listener\n    self._listenerObj(listener)\n  }\n\n  /**\n   * Insert the listener object into the Map.\n   *\n   * The error messages are logged to the console, like warnings.\n   *\n   * @param listenerObj   Listener object.\n   * @return boolean      True if is all okay, false otherwise.\n   */\n  _listenerObj (listenerObj) {\n    let self = this\n\n    // validate event name\n    if (listenerObj.event === undefined) {\n      self.api.log('invalid listener - missing event name', 'warning')\n      return false\n    }\n\n    // validate run\n    if (listenerObj.run === undefined || typeof listenerObj.run !== 'function') {\n      self.api.log('invalid listener - missing run property or not a function', 'warning')\n      return false\n    }\n\n    // if priority are not defined\n    if (listenerObj.priority === undefined) { listenerObj.priority = self.api.config.general.defaultListenerPriority }\n\n    // if there is no listener for this event, create a new entry\n    // with an empty array\n    if (!self.events.has(listenerObj.event)) { self.events.set(listenerObj.event, []) }\n\n    // get the array with all registered listeners for this event\n    let listeners = self.events.get(listenerObj.event)\n\n    // register the new listener\n    listeners.push(listenerObj)\n\n    // order the listeners by priority\n    listeners.sort((l1, l2) => l1.priority - l2.priority)\n\n    return true\n  }\n\n  // --------------------------------------------------------------------------------------------------- [Other Methods]\n\n  /**\n   * Iterate over all active modules and\n   *\n   * @param next\n   */\n  loadListeners (next) {\n    let self = this\n\n    // iterate all active modules\n    self.api.modules.modulesPaths.forEach(modulePath => {\n      // build path for the module listeners folder\n      let listenersFolderPath = `${modulePath}/listeners`\n\n      // check if the listeners\n      if (!Utils.directoryExists(listenersFolderPath)) { return }\n\n      // get all listeners files\n      Utils.recursiveDirectoryGlob(listenersFolderPath, 'js').forEach(listenerPath => {\n        // require listener file\n        let collection = require(listenerPath)\n\n        for (let i in collection) {\n          // get action object\n          let listener = collection[ i ]\n\n          // insert the listener on the map\n          self._listenerObj(listener)\n        }\n      })\n    })\n\n    // end listeners loading\n    next()\n  }\n\n}\n\n/**\n * Satellite to load the event manager.\n */\nexport default class {\n\n  /**\n   * Satellite load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 300\n\n  /**\n   * Satellite loading function.\n   *\n   * @param api   API reference object.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // make events api available in all platform\n    api.events = new EventsManager(api)\n\n    // load listeners\n    api.events.loadListeners(next)\n  }\n\n}\n"],"sourceRoot":"/source/"}