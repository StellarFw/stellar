{"version":3,"sources":["satellites/connection.js"],"names":[],"mappings":"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","file":"satellites/connection.js","sourcesContent":["import UUID from 'node-uuid';\n\n/**\n * Create a clean connection.\n *\n * @param connection  Connection object.\n * @returns {{}}      New clean connection object.\n */\nlet cleanConnection = connection => {\n  let clean = {}\n\n  for (let i in connection) {\n    if (i !== 'rawConnection') { clean[ i ] = connection[ i ] }\n  }\n\n  return clean\n}\n\nclass Connections {\n\n  /**\n   * API reference object.\n   */\n  api\n\n  /**\n   * Hash with all registered middleware.\n   *\n   * @type {{}}\n   */\n  middleware = {}\n\n  /**\n   * Array with global middleware.\n   *\n   * @type {Array}\n   */\n  globalMiddleware = []\n\n  /**\n   * Array with the allowed verbs.\n   *\n   * @type {string[]}\n   */\n  allowedVerbs = [\n    'quit',\n    'exit',\n    'paramAdd',\n    'paramDelete',\n    'paramView',\n    'paramsView',\n    'paramsDelete',\n    'roomAdd',\n    'roomLeave',\n    'roomView',\n    'detailsView',\n    'say'\n  ]\n\n  /**\n   * Hash with the active connections.\n   *\n   * @type {{}}\n   */\n  connections = {}\n\n  /**\n   * Create a new class instance.\n   *\n   * @param api   API object reference.\n   */\n  constructor (api) { this.api = api }\n\n  /**\n   * Add a new middleware.\n   *\n   * @param data  Middleware to be added.\n   */\n  addMiddleware (data) {\n    let self = this\n\n    // middleware require a name\n    if (!data.name) { throw new Error('middleware.name is required')}\n\n    // if there is no defined priority use the default\n    if (!data.priority) { data.priority = self.api.config.general.defaultMiddlewarePriority }\n\n    // ensure the priority is a number\n    data.priority = Number(data.priority)\n\n    // save the new middleware\n    self.middleware[ data.name ] = data\n\n    // push the new middleware to the global list\n    self.globalMiddleware.push(data.name)\n\n    // sort the global middleware array\n    self.globalMiddleware.sort((a, b) => {\n      if (self.middleware[ a ].priority > self.middleware[ b ].priority) {\n        return 1\n      }\n\n      return -1\n    })\n  }\n\n  apply (connectionId, method, args, callback) {\n    let self = this\n\n    if (args === undefined && callback === undefined && typeof method === 'function') {\n      callback = method\n      args = null\n      method = null\n    }\n\n    self.api.redis.doCluster('api.connections.applyCatch', [ connectionId, method, args ], connectionId, callback)\n  }\n\n  applyCatch (connectionId, method, args, callback) {\n    let self = this\n\n    let connection = self.api.connections.connections[ connectionId ]\n    if (method && args) {\n      if (method === 'sendMessage' || method === 'sendFile') {\n        connection[ method ](args)\n      } else {\n        connection[ method ].apply(connection, args)\n      }\n    }\n\n    if (typeof callback === 'function') {\n      process.nextTick(() => { callback(cleanConnection(connection)) })\n    }\n  }\n}\n\n/**\n * Class who represents an active connection.\n */\nclass Connection {\n\n  /**\n   * Api reference.\n   */\n  api\n\n  /**\n   * Unique client identifier.\n   */\n  id\n\n  /**\n   * Timestamp of the connection.\n   */\n  connectedAt\n\n  /**\n   * Rooms which the client belongs.\n   *\n   * @type {Array}\n   */\n  rooms = []\n\n  /**\n   * Create a new connection object.\n   *\n   * The data object needs to have the follow properties:\n   *  - type\n   *  - remotePort\n   *  - remoteIP\n   *  - rawConnection\n   *\n   * @param api Stellar API reference\n   * @param data hash map\n   */\n  constructor (api, data) {\n    let self = this\n\n    self.api = api\n    self._setup(data)\n\n    // save this connection on the connection manager\n    api.connections.connections[ self.id ] = self\n\n    // execute the middleware\n    self.api.connections.globalMiddleware.forEach(middlewareName => {\n      if (typeof self.api.connections.middleware[ middlewareName ].create === 'function') {\n        self.api.connections.middleware[ middlewareName ].create(self)\n      }\n    })\n  }\n\n  /**\n   * Initialize the connection object.\n   *\n   * @param data\n   * @private\n   */\n  _setup (data) {\n    let self = this\n\n    if (data.id) {\n      self.id = data.id;\n    } else {\n      // generate an unique ID for this connection\n      self.id = self._generateID()\n    }\n\n    // set the connection timestamp\n    self.connectedAt = new Date().getTime();\n\n    [ 'type', 'rawConnection' ].forEach(req => {\n      if (data[ req ] === null || data[ req ] === undefined) {\n        throw new Error(`${req} is required to create a new connection object`)\n      }\n      self[ req ] = data[ req ]\n    });\n\n    [ 'remotePort', 'remoteIP' ].forEach(req => {\n      if (data[ req ] === null || data[ req ] === undefined) {\n        if (self.api.config.general.enforceConnectionProperties === true) {\n          throw new Error(`${req} is required to create a new connection object`)\n        } else {\n          data[ req ] = 0; // could be a random uuid as well?\n        }\n      }\n      self[ req ] = data[ req ]\n    });\n\n    // set connection defaults\n    let connectionDefaults = {\n      error: null,\n      params: {},\n      rooms: [],\n      fingerprint: null,\n      pendingActions: 0,\n      totalActions: 0,\n      messageCount: 0,\n      canChat: false\n    }\n\n    for (let i in connectionDefaults) {\n      if (self[ i ] === undefined && data[ i ] !== undefined) { self[ i ] = data[ i ] }\n      if (self[ i ] === undefined) { self[ i ] = connectionDefaults[ i ] }\n    }\n\n    self.api.i18n.invokeConnectionLocale(self)\n  }\n\n  /**\n   * Generate an unique identifier for this connection.\n   *\n   * @returns {*}\n   * @private\n   */\n  _generateID () { return UUID.v4() }\n\n  /**\n   * Send a message to this connection.\n   *\n   * @param message\n   */\n  sendMessage (message) {\n    throw new Error(`I should be replaced with a connection-specific method [${message}]`)\n  }\n\n  /**\n   * Send a file to this connection.\n   *\n   * @param path\n   */\n  sendFile (path) {\n    throw new Error(`I should be replaced with a connection-specific method [${path}]`)\n  }\n\n  /**\n   * Localize a message.\n   *\n   * @param message   Message to be localized.\n   */\n  localize (message) {\n    let self = this\n    return self.api.i18n.localize(message, self)\n  }\n\n  destroy (callback) {\n    let self = this\n\n    // set connection as destroyed\n    self.destroyed = true\n\n    // execute the destroy middleware\n    self.api.connections.globalMiddleware.forEach(middlewareName => {\n      if (typeof self.api.connections.middleware[ middlewareName ].destroy === 'function') {\n        self.api.connections.middleware[ middlewareName ].destroy(self)\n      }\n    })\n\n    // remove the connection from all rooms\n    if (self.canChat === true) {\n      self.rooms.forEach(room => self.api.chatRoom.removeMember(self.id, room))\n    }\n\n    // get server instance\n    let server = self.api.servers.servers[ self.type ]\n\n    if (server) {\n      if (server.attributes.logExits === true) {\n        server.log('connection closed', 'info', {to: self.remoteIP})\n      }\n\n      if (typeof server.goodbye === 'function') { server.goodbye(self) }\n    }\n\n    // remove this connection from the connections array\n    delete self.api.connections.connections[ self.id ]\n\n    // execute the callback function\n    if (typeof callback === 'function') { callback() }\n  }\n\n  /**\n   * Set a new connection attribute.\n   *\n   * @param key\n   * @param value\n   */\n  set (key, value) {\n    let self = this\n    self[ key ] = value\n  }\n\n  /**\n   * Execute the right operation for the given verb.\n   *\n   * @param verb      Verb to be executed.\n   * @param words     Words are optional.\n   * @param callback  Callback function.\n   */\n  verbs (verb, words, callback) {\n    let self = this\n\n    let key, value, room\n    let server = self.api.servers.servers[ self.type ]\n    let allowedVerbs = server.attributes.verbs\n\n    if (typeof words === 'function' && !callback) {\n      callback = words\n      words = []\n    }\n\n    if (!(words instanceof Array)) { words = [ words ] }\n\n    if (server && allowedVerbs.indexOf(verb) >= 0) {\n      // log verb message\n      server.log('verb', 'debug', {verb: verb, to: self.remoteIP, params: JSON.stringify(words)})\n\n      if (verb === 'quit' || verb === 'exit') {\n        server.goodbye(self)\n      } else if (verb === 'paramAdd') {\n        key = words[ 0 ]\n        value = words[ 1 ]\n\n        if (words[ 0 ] && (words[ 0 ].indexOf('=') >= 0)) {\n          let parts = words[ 0 ].split('=')\n          key = parts[ 0 ]\n          value = parts[ 1 ]\n        }\n\n        self.params[ key ] = value\n\n        // execute the callback function\n        if (typeof callback === 'function') { callback(null, null) }\n      } else if (verb === 'paramDelete') {\n        key = words[ 0 ]\n        delete self.params[ key ]\n\n        // execute the callback function\n        if (typeof callback === 'function') { callback(null, null) }\n      } else if (verb === 'paramView') {\n        key = words[ 0 ]\n\n        if (typeof callback === 'function') { callback(null, self.params[ key ]) }\n      } else if (verb === 'paramsView') {\n        if (typeof callback === 'function') { callback(null, self.params) }\n      } else if (verb === 'paramsDelete') {\n        // delete all params\n        for (let i in self.params) { delete self.params[ i ] }\n\n        if (typeof callback === 'function') { callback(null, null) }\n      } else if (verb === 'roomAdd') {\n        room = words[ 0 ]\n\n        self.api.chatRoom.addMember(self.id, room, (error, didHappen) => {\n          if (typeof callback === 'function') { callback(error, didHappen) }\n        })\n      } else if (verb === 'roomLeave') {\n        room = words[ 0 ]\n        self.api.chatRoom.removeMember(self.id, room, function (error, didHappen) {\n          if (typeof callback === 'function') { callback(error, didHappen) }\n        })\n      } else if (verb === 'roomView') {\n        // get requested room name\n        room = words[ 0 ]\n\n        if (self.rooms.indexOf(room) > -1) {\n          self.api.chatRoom.roomStatus(room, (error, roomStatus) => {\n            if (typeof callback === 'function') { callback(error, roomStatus) }\n          })\n        } else {\n          if (typeof callback === 'function') { callback(`not member of room ${room}`) }\n        }\n      } else if (verb === 'detailsView') {\n        let details = {\n          id: self.id,\n          fingerprint: self.fingerprint,\n          remoteIP: self.remoteIP,\n          remotePort: self.remotePort,\n          params: self.params,\n          connectedAt: self.connectedAt,\n          rooms: self.rooms,\n          totalActions: self.totalActions,\n          pendingActions: self.pendingActions\n        }\n\n        // execute the callback function\n        if (typeof callback === 'function') { callback(null, details) }\n\n      } else if (verb === 'say') {\n        // get the room name\n        room = words.shift()\n\n        // broadcast the message on the requested room\n        self.api.chatRoom.broadcast(self, room, words.join(' '), error => {\n          if (typeof callback === 'function') { callback(error) }\n        })\n      } else {\n        if (typeof callback === 'function') {\n          callback(self.api.config.errors.verbNotFound(self, verb), null)\n        }\n      }\n    } else {\n      if (typeof callback === 'function') {\n        callback(self.api.config.errors.verbNotAllowed(self, verb), null)\n      }\n    }\n  }\n}\n\nexport default class {\n\n  /**\n   * Satellite load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 400\n\n  /**\n   * Satellite load function.\n   *\n   * @param api   API reference object.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // put Connections instance available to all platform\n    api.connections = new Connections(api)\n\n    // put the connection Class available to all platform\n    api.connection = Connection\n\n    // finish the loading process\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}