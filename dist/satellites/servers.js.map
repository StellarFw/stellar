{"version":3,"sources":["satellites/servers.js"],"names":[],"mappings":"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","file":"satellites/servers.js","sourcesContent":["// module dependencies\nimport _ from 'lodash'\nimport path from 'path'\nimport async from 'async'\nimport Utils from '../utils'\n\n/**\n * Manager for server instances.\n */\nclass Servers {\n\n  /**\n   * Engine API instance.\n   * @type {null}\n   */\n  api = null;\n\n  /**\n   * Array with all running server instances.\n   *\n   * @type {{}}\n   */\n  servers = {};\n\n  /**\n   * Class constructor.\n   *\n   * @param api engine api instance.\n   */\n  constructor (api) {\n    this.api = api;\n  }\n\n  /**\n   * Load all servers.\n   *\n   * @param next  Callback function.\n   */\n  loadServers (next) {\n    let self = this\n    let jobs = []\n\n    // get the list of servers to load\n    let serversFiles = Utils.getFiles(path.resolve(__dirname + '/../servers'))\n\n    for (let k in serversFiles) {\n      // get server filename\n      let file = serversFiles[ k ]\n      let parts = file.split(/[\\/\\\\]+/)\n      let serverName = parts[ (parts.length - 1) ].split('.')[ 0 ]\n\n      // only load .js files (in debug we also have .map files)\n      if (parts[ (parts.length - 1) ].match('\\.map$')) { continue }\n\n      // get server options if exists\n      let options = self.api.config.servers[ serverName ]\n\n      // only load the server if that was enabled\n      if (options && options.enable === true) {\n        // get server constructor\n        let serverConstructor = require(file).default\n\n        // push the new job to the queue\n        jobs.push(done => {\n          // instance the new server\n          self.servers[ serverName ] = new serverConstructor(self.api, options)\n\n          // log a debug message\n          self.api.log(`Initialized server: ${serverName}`, 'debug')\n\n          // execute the done function\n          return done()\n        })\n      }\n    }\n\n    // execute all the jobs\n    async.series(jobs, next)\n  }\n\n  /**\n   * Start all the existing servers.\n   *\n   * @param next  Callback function.\n   */\n  startServers (next) {\n    let self = this\n\n    // array with all jobs\n    let jobs = []\n\n    // for each server create a new job\n    Object.keys(self.servers).forEach(serverName => {\n      // get server instance\n      let server = self.servers[ serverName ]\n\n      // only load the server if the server was enabled\n      if (server.options.enable === true) {\n        let message = `Starting server: ${serverName}`\n\n        // append the bind IP to log message\n        if (self.api.config.servers[ serverName ].bindIP) {\n          message += ` @ ${self.api.config.servers[ serverName ].bindIP}`\n        }\n\n        // append the port to log message\n        if (self.api.config.servers[ serverName ].port) {\n          message += ` @ ${self.api.config.servers[ serverName ].port}`\n        }\n\n        // push a new job\n        jobs.push(done => {\n          self.api.log(message, 'notice')\n          server.start(error => {\n            if (error) { return done(error) }\n            self.api.log(`Server started: ${serverName}`, 'debug')\n            return done()\n          })\n        })\n      }\n    })\n\n    // process all the jobs\n    async.series(jobs, next)\n  }\n\n  /**\n   * Stop all running servers.\n   *\n   * @param next  Callback function.\n   */\n  stopServers (next) {\n    let self = this\n\n    // array with the jobs to stop all servers\n    let jobs = []\n\n    Object.keys(self.servers).forEach(serverName => {\n      // get server instance\n      let server = self.servers[ serverName ]\n\n      // check if the server are enable\n      if ((server && server.options.enable === true) || !server) {\n        jobs.push(done => {\n          self.api.log(`Stopping server: ${serverName}`, 'notice')\n\n          // call the server stop method\n          server.stop(error => {\n            if (error) { return done(error) }\n            self.api.log(`Server stopped ${serverName}`, 'debug')\n            return done()\n          })\n        })\n      }\n    })\n\n    // execute all jobs\n    async.series(jobs, next)\n  }\n}\n\nexport default class {\n\n  /**\n   * This should be loaded after all engine\n   * loading satellites.\n   *\n   * @type {number}\n   */\n  loadPriority = 550;\n\n  startPriority = 900;\n\n  stopPriority = 100;\n\n  load (api, next) {\n    // instance the server manager\n    api.servers = new Servers(api);\n\n    // load enabled servers\n    api.servers.loadServers(next);\n  }\n\n  /**\n   * Satellite starting function.\n   *\n   * @param api   API object reference.\n   * @param next  Callback function.\n   */\n  start (api, next) {\n    // start servers\n    api.servers.startServers(next)\n  }\n\n  stop (api, next) {\n    // stop servers\n    api.servers.stopServers(next);\n  }\n\n}\n"],"sourceRoot":"/source/"}