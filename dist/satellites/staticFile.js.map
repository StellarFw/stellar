{"version":3,"sources":["satellites/staticFile.js"],"names":[],"mappings":"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","file":"satellites/staticFile.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport Mime from 'mime'\n\n/**\n * Class to manage the static files.\n */\nclass StaticFile {\n\n  /**\n   * API object reference.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Search locations.\n   *\n   * @type {Array}\n   */\n  searchLocations = []\n\n  /**\n   * Create a new instance of this class.\n   *\n   * @param api API object reference.\n   */\n  constructor (api) {\n    let self = this\n\n    // save API reference object\n    self.api = api\n  }\n\n  /**\n   * Get the public path.\n   *\n   * @param connection  Client connection object.\n   * @param counter\n   * @returns {*}\n   */\n  searchPath (connection, counter = 0) {\n    let self = this\n\n    if (self.searchLocations.length === 0 || counter >= self.searchLocations.length) {\n      return null\n    } else {\n      return self.searchLocations[ counter ]\n    }\n  }\n\n  /**\n   * Get the content of a file by the 'connection.params.file' var.\n   *\n   * @param connection  Client connection object.\n   * @param callback    Callback function.\n   * @param counter\n   */\n  get (connection, callback, counter = 0) {\n    let self = this\n\n    if (!connection.params.file || !self.searchPath(connection, counter)) {\n      self.sendFileNotFound(connection, self.api.config.errors.fileNotProvided(connection), callback)\n    } else {\n      let file = null\n\n      if (!path.isAbsolute(connection.params.file)) {\n        file = path.normalize(self.searchPath(connection, counter) + '/' + connection.params.file)\n      } else {\n        file = connection.params.file\n      }\n\n      if (file.indexOf(path.normalize(self.searchPath(connection, counter))) !== 0) {\n        self.get(connection, callback, counter + 1)\n      } else {\n        self.checkExistence(file, (exists, truePath) => {\n          if (exists) {\n            self.sendFile(truePath, connection, callback)\n          } else {\n            self.get(connection, callback, counter + 1)\n          }\n        })\n      }\n    }\n  }\n\n  /**\n   * Send a file to the client.\n   *\n   * @param file\n   * @param connection\n   * @param callback\n   */\n  sendFile (file, connection, callback) {\n    let self = this\n    let lastModified\n\n    // get file information\n    fs.stat(file, (err, stats) => {\n      // check if is an error\n      if (err) {\n        // if we can't read the file respond with an error\n        self.sendFileNotFound(connection, self.api.config.errors.fileReadError(String(err)), callback)\n      } else {\n        let mime = Mime.lookup(file)\n        let length = stats.size\n        let fileStream = fs.createReadStream(file)\n        let start = new Date().getTime()\n\n        lastModified = stats.mtime\n\n        // add a listener to the 'close' event\n        fileStream.on('close', () => {\n          let duration = new Date().getTime() - start\n          self.logRequest(file, connection, length, duration, true)\n        })\n\n        // add a listener to the 'error' event\n        fileStream.on('error', (err) => { self.api.log(err) })\n\n        // execute the callback\n        callback(connection, null, fileStream, mime, length, lastModified)\n      }\n    })\n  }\n\n  /**\n   * Send a file not found error to the client.\n   *\n   * @param connection    Client connection object.\n   * @param errorMessage  Error message to send.\n   * @param callback      Callback function.\n   */\n  sendFileNotFound (connection, errorMessage, callback) {\n    let self = this\n\n    // add error message\n    connection.error = new Error(errorMessage)\n\n    // load 404 error\n    self.logRequest('{404: not found}', connection, null, null, false)\n\n    // execute the callback function\n    callback(connection, self.api.config.errors.fileNotFound(), null, 'text/html', self.api.config.errors.fileNotFound().length)\n  }\n\n  /**\n   * Check the existence of a file.\n   *\n   * @param file\n   * @param callback\n   */\n  checkExistence (file, callback) {\n    let self = this\n\n    fs.stat(file, (error, stats) => {\n        // if exists an error execute the callback\n        // function and return\n        if (error) {\n          callback(false, file)\n          return\n        }\n\n        if (stats.isDirectory()) {\n          let indexPath = file + '/' + self.api.config.general.directoryFileType\n          self.checkExistence(indexPath, callback)\n        } else if (stats.isSymbolicLink()) {\n          fs.readlink(file, (error, truePath) => {\n            if (error) {\n              callback(false, file);\n            } else {\n              truePath = path.normalize(truePath)\n              self.checkExistence(truePath, callback)\n            }\n          })\n        } else if (stats.isFile()) {\n          callback(true, file)\n        } else {\n          callback(false, file)\n        }\n      }\n    )\n  }\n\n  /**\n   * Log file requests.\n   *\n   * @param file\n   * @param connection\n   * @param length\n   * @param duration\n   * @param success\n   */\n  logRequest (file, connection, length, duration, success) {\n    let self = this\n\n    self.api.log(`[ file @ ${connection.type}]`, 'debug', {\n      to: connection.remoteIP,\n      file: file,\n      size: length,\n      duration: duration,\n      success: success\n    })\n  }\n}\n\nexport default class {\n\n  /**\n   * Satellite load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 510\n\n  /**\n   * Satellite load function.\n   *\n   * @param api   API reference object.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // put static file methods available on the API object\n    api.staticFile = new StaticFile(api)\n\n    // load in the explicit public paths first\n    if (api.config.general.paths !== undefined) {\n      api.staticFile.searchLocations.push(path.normalize(api.config.general.paths.public))\n    }\n\n    // finish satellite loading\n    next()\n  }\n}\n"],"sourceRoot":"/source/"}