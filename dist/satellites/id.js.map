{"version":3,"sources":["satellites/id.js"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;SAkBE,Y,GAAe,G;SAOf,a,GAAgB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAQV,G,EAAK,I,EAAM;AACf,UAAI,YAAK,KAAT,EAAgB;AACd,YAAI,EAAJ,GAAS,YAAK,KAAd;AACD,OAFD,MAEO,IAAI,QAAQ,GAAR,CAAY,aAAhB,EAA+B;AACpC,YAAI,EAAJ,GAAS,QAAQ,GAAR,CAAY,aAArB;AACD,OAFM,MAEA,IAAI,CAAC,IAAI,MAAJ,CAAW,OAAX,CAAmB,EAAxB,EAA4B;;AAEjC,YAAI,aAAa,gBAAM,oBAAN,EAAjB;;AAEA,YAAI,eAAe,KAAnB,EAA0B;AACxB,cAAI,UAAU,iFAAd;;AAEA,cAAI;AACF,gBAAI,GAAJ,CAAQ,OAAR,EAAiB,MAAjB;AACD,WAFD,CAEE,OAAO,CAAP,EAAU;AACV,oBAAQ,GAAR,CAAY,OAAZ;AACD;AACF;;AAED,YAAI,EAAJ,GAAS,UAAT;AACA,YAAI,kBAAQ,QAAZ,EAAsB;AACpB,cAAI,EAAJ,UAAc,QAAQ,GAAtB;AACD;AACF,OAlBM,MAkBA;AACL,YAAI,EAAJ,GAAS,IAAI,MAAJ,CAAW,OAAX,CAAmB,EAA5B;AACD;;;AAGD,UAAI,cAAJ,GAAqB,8BAA8B,OAAnD;;;AAGA;AACD;;;;;;;;;;;0BAQM,G,EAAK,I,EAAM;;AAEhB,UAAI,GAAJ,iBAAsB,IAAI,EAA1B,EAAgC,QAAhC;;;AAGA;AACD","file":"satellites/id.js","sourcesContent":["import {argv} from 'yargs'\nimport cluster from 'cluster'\nimport Utils from  '../utils'\n\n/**\n * Setup the server ID.\n *\n * This ID, can be configured using:\n * - the 'api.config.general.id' configuration;\n * - '--title' option on the command line;\n * - 'STELLAR_TITLE' environment variable;\n * - or one can be generated automatically using the external server IP.\n */\nexport default class {\n\n  /**\n   * Load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 100\n\n  /**\n   * Start priority.\n   *\n   * @type {number}\n   */\n  startPriority = 2\n\n  /**\n   * Initializer load functions.\n   *\n   * @param api   API reference.\n   * @param next  Callback.\n   */\n  load (api, next) {\n    if (argv.title) {\n      api.id = argv.title;\n    } else if (process.env.STELLAR_TITLE) {\n      api.id = process.env.STELLAR_TITLE;\n    } else if (!api.config.general.id) {\n      // get servers external IP\n      let externalIP = Utils.getExternalIPAddress();\n\n      if (externalIP === false) {\n        let message = ' * Error fetching this host external IP address; setting id base to \\'stellar\\'';\n\n        try {\n          api.log(message, 'crit');\n        } catch (e) {\n          console.log(message);\n        }\n      }\n\n      api.id = externalIP;\n      if (cluster.isWorker) {\n        api.id += `:${process.pid}`;\n      }\n    } else {\n      api.id = api.config.general.id;\n    }\n\n    // save Stellar version\n    api.stellarVersion = require(`../../package.json`).version;\n\n    // finish the initializer load\n    next();\n  }\n\n  /**\n   * Initializer start function.\n   *\n   * @param api   API reference.\n   * @param next  Callback.\n   */\n  start (api, next) {\n    // print out the server ID\n    api.log(`server ID: ${api.id}`, 'notice');\n\n    // finish the initializer start\n    next();\n  }\n\n}\n"],"sourceRoot":"/source/"}