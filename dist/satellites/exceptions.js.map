{"version":3,"sources":["satellites/exceptions.js"],"names":[],"mappings":"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","file":"satellites/exceptions.js","sourcesContent":["import os from 'os';\n\nclass ExceptionsManager {\n\n  /**\n   * API reference.\n   *\n   * @type {null}\n   */\n  api = null;\n\n  /**\n   * Array with the exceptions reporters.\n   *\n   * @type {Array}\n   */\n  reporters = [];\n\n  constructor (api) {\n    this.api = api;\n\n    // load default console handler\n    this.reporters.push(function (err, type, name, objects, severity) {\n      let extraMessages = [];\n\n      if (type === 'loader') {\n        extraMessages.push(`! Failed to load ${objects.fullFilePath}`)\n      }\n\n      else if (type === 'action') {\n        extraMessages.push(`! uncaught error from action: ${name}`);\n        extraMessages.push('! connection details:');\n        var relevantDetails = [ 'action', 'remoteIP', 'type', 'params', 'room' ];\n        for (var i in relevantDetails) {\n          if (\n            objects.connection[ relevantDetails[ i ] ] !== null &&\n            objects.connection[ relevantDetails[ i ] ] !== undefined &&\n            typeof objects.connection[ relevantDetails[ i ] ] !== 'function'\n          ) {\n            extraMessages.push('!     ' + relevantDetails[ i ] + ': ' + JSON.stringify(objects.connection[ relevantDetails[ i ] ]));\n          }\n        }\n      }\n\n      else if (type === 'task') {\n        extraMessages.push(`! uncaught error from task: ${name} on queue ${objects.queue} (worker #${objects.workerId})`);\n        try {\n          extraMessages.push('!     arguments: ' + JSON.stringify(objects.task.args));\n        } catch (e) {\n        }\n      }\n\n      else {\n        extraMessages.push(`! Error: ${err.message}`);\n        extraMessages.push(`!     Type: ${type}`);\n        extraMessages.push(`!     Name: ${name}`);\n        extraMessages.push('!     Data: ' + JSON.stringify(objects));\n      }\n\n      for (let m in extraMessages) {\n        api.log(extraMessages[ m ], severity);\n      }\n      let lines;\n      try {\n        lines = err.stack.split(os.EOL);\n      } catch (e) {\n        lines = new Error(err).stack.split(os.EOL);\n      }\n      for (let l in lines) {\n        var line = lines[ l ];\n        api.log('! ' + line, severity);\n      }\n      api.log('*', severity);\n    });\n  }\n\n  /**\n   * Execute reporters.\n   *\n   * @param err\n   * @param type\n   * @param name\n   * @param objects\n   * @param severity\n   */\n  report (err, type, name, objects, severity) {\n    let self = this;\n\n    if (!severity) {\n      severity = 'error';\n    }\n\n    for (let i in self.reporters) {\n      self.reporters[ i ](err, type, name, objects, severity);\n    }\n  }\n\n  /**\n   * Loader exception.\n   *\n   * @param fullFilePath\n   * @param err\n   */\n  loader (fullFilePath, err) {\n    let self = this;\n    let name = `loader ${fullFilePath}`;\n    self.report(err, 'loader', name, { fullFilePath: fullFilePath }, 'alert');\n  }\n\n  /**\n   * Handler for action exceptions.\n   *\n   * @param err\n   * @param data\n   * @param next\n   */\n  action (err, data, next) {\n    let self = this;\n    let simpleName;\n\n    try {\n      simpleName = data.action;\n    } catch (e) {\n      simpleName = err.message;\n    }\n\n    let name = `action ${simpleName}`;\n    self.report(err, 'action', name, { connection: data.connection }, 'error');\n    // remove already processed responses\n    data.response = {};\n    if (typeof next === 'function') {\n      next();\n    }\n  }\n\n  /**\n   * Exception handler for tasks.\n   *\n   * @param error       Error object.\n   * @param queue       Queue here the error occurs\n   * @param task\n   * @param workerId\n   */\n  task (error, queue, task, workerId) {\n    let self = this\n\n    let simpleName\n\n    try {\n      simpleName = task[ 'class' ]\n    } catch (e) {\n      simpleName = error.message\n    }\n\n    self.api.exceptionHandlers.report(error, 'task', `task:${simpleName}`, name, {\n      task: task,\n      queue: queue,\n      workerId: workerId\n    }, self.api.config.tasks.workerLogging.failure)\n  }\n}\n\nexport default class {\n\n  loadPriority = 130\n\n  load (api, next) {\n    api.exceptionHandlers = new ExceptionsManager(api)\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}