{"version":3,"sources":["satellites/pids.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEM,I;;;;;;;;;;;;;;;;;;AA2BJ,gBAAa,GAAb,EAAkB;AAAA;;;AAEhB,SAAK,GAAL,GAAW,GAAX;AACD;;;;;;;;;;;;;;;;;;;2BAKO;AACN,UAAI,OAAO,IAAX;;;AAGA,WAAK,GAAL,GAAW,QAAQ,GAAnB;;;AAGA,WAAK,IAAL,GAAY,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB,KAAxB,CAA8B,GAA1C;;;AAGA,UAAI,kBAAQ,QAAZ,EAAsB;AACpB,aAAK,KAAL,gBAAwB,KAAK,WAAL,EAAxB;AACD,OAFD,MAEO;AACL,aAAK,KAAL,GAAa,KAAK,WAAL,EAAb;AACD;;;AAGD,UAAI;AACF,qBAAG,SAAH,CAAa,KAAK,IAAlB;AACD,OAFD,CAEE,OAAO,CAAP,EAAU,CACX;AACF;;;;;;;;mCAKe;AACd,UAAI,OAAO,IAAX;AACA,mBAAG,aAAH,CAAoB,KAAK,IAAzB,SAAiC,KAAK,KAAtC,EAA+C,KAAK,GAAL,CAAS,QAAT,EAA/C,EAAoE,OAApE;AACD;;;;;;;;mCAKe;AACd,UAAI,OAAO,IAAX;;AAEA,UAAI;AACF,qBAAG,UAAH,CAAiB,KAAK,IAAtB,SAA8B,KAAK,KAAnC;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,aAAK,GAAL,CAAS,GAAT,CAAa,0BAAb,EAAyC,OAAzC,EAAkD,CAAlD;AACD;AACF;;;;;;;;;;;;;kCAUc;AACb,UAAI,OAAO,IAAX;AACA,UAAI,UAAU,KAAK,GAAL,CAAS,EAAvB;;AAEA,gBAAU,QAAQ,OAAR,CAAgB,IAAhB,EAAsB,GAAtB,CAAV;AACA,gBAAU,QAAQ,OAAR,CAAgB,KAAhB,EAAuB,GAAvB,CAAV;AACA,gBAAU,QAAQ,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;AACA,gBAAU,QAAQ,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;;AAEA,aAAO,OAAP;AACD;;;;;;;;;;SAWD,Y,GAAe,G;SAOf,a,GAAgB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAQV,G,EAAK,I,EAAM;;AAEf,UAAI,IAAJ,GAAW,IAAI,IAAJ,CAAS,GAAT,CAAX;;;AAGA,UAAI,IAAJ,CAAS,IAAT;;;AAGA;AACD;;;;;;;;;;;0BAQM,G,EAAK,I,EAAM;;AAEhB,UAAI,IAAJ,CAAS,YAAT;;;AAGA,UAAI,GAAJ,WAAgB,QAAQ,GAAxB,EAA+B,QAA/B;;;AAGA;AACD","file":"satellites/pids.js","sourcesContent":["import fs from 'fs';\nimport cluster from 'cluster';\n\nclass Pids {\n\n  /**\n   * API reference.\n   */\n  api;\n\n  /**\n   * Process ID.\n   */\n  pid;\n\n  /**\n   * Pids folder.\n   */\n  path;\n\n  /**\n   * Process title.\n   */\n  title;\n\n  /**\n   * Class constructor.\n   *\n   * @param api API reference.\n   */\n  constructor (api) {\n    // save API reference\n    this.api = api;\n  }\n\n  /**\n   * Init the pid manager.\n   */\n  init () {\n    let self = this;\n\n    // set the process id\n    self.pid = process.pid;\n\n    // save pids folder to syntax sugar\n    self.path = self.api.config.general.paths.pid;\n\n    // define the process name\n    if (cluster.isMaster) {\n      self.title = `stellar-${self._sanitizeId()}`\n    } else {\n      self.title = self._sanitizeId();\n    }\n\n    // create the 'pids' directory if not exists\n    try {\n      fs.mkdirSync(self.path);\n    } catch (e) {\n    }\n  }\n\n  /**\n   * Write pid file.\n   */\n  writePidFile () {\n    let self = this;\n    fs.writeFileSync(`${self.path}/${self.title}`, self.pid.toString(), 'ascii');\n  }\n\n  /**\n   * Clear pid file.\n   */\n  clearPidFile () {\n    let self = this;\n\n    try {\n      fs.unlinkSync(`${self.path}/${self.title}`);\n    } catch (e) {\n      self.api.log('Unable to remove pidfile', 'error', e);\n    }\n  }\n\n  /**\n   * Get a sanitized pid name for this process.\n   *\n   * The pid name is based on the process id.\n   *\n   * @returns {*}\n   * @private\n   */\n  _sanitizeId () {\n    let self = this;\n    let pidfile = self.api.id;\n\n    pidfile = pidfile.replace(/:/g, '-');\n    pidfile = pidfile.replace(/\\s/g, '-');\n    pidfile = pidfile.replace(/\\r/g, '');\n    pidfile = pidfile.replace(/\\n/g, '');\n\n    return pidfile;\n  }\n\n}\n\nexport default class {\n\n  /**\n   * Load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 110;\n\n  /**\n   * Start priority.\n   *\n   * @type {number}\n   */\n  startPriority = 1;\n\n  /**\n   * Load initializer.\n   *\n   * @param api   API reference.\n   * @param next  Callback.\n   */\n  load (api, next) {\n    // add pids class to the API\n    api.pids = new Pids(api);\n\n    // init pid manager\n    api.pids.init();\n\n    // finish the initializer load\n    next();\n  }\n\n  /**\n   * Start initializer.\n   *\n   * @param api   API reference.\n   * @param next  Callback.\n   */\n  start (api, next) {\n    // write pid file\n    api.pids.writePidFile();\n\n    // log the process pid\n    api.log(`pid: ${process.pid}`, 'notice');\n\n    // finish the initializer start\n    next();\n  }\n\n}\n"],"sourceRoot":"/source/"}