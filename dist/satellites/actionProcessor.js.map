{"version":3,"sources":["satellites/actionProcessor.js"],"names":[],"mappings":"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","file":"satellites/actionProcessor.js","sourcesContent":["import async from 'async'\n\n/**\n * This class process an action request.\n */\nclass ActionProcessor {\n\n  /**\n   * API reference.\n   *\n   * @type {null}\n   */\n  api = null\n\n  connection = null\n  action = null\n  toProcess = true\n  toRender = true\n  messageCount = null\n  params = null\n  callback = null\n  missingParams = []\n  validatorErrors = []\n  actionStartTime = null\n  actionTemplate = null\n  working = false\n  response = {}\n  duration = null\n  actionStatus = null\n\n  /**\n   * Create a new Action Processor instance.\n   *\n   * @param api API reference.\n   * @param connection Connection object.\n   * @param callback Callback function.\n   */\n  constructor (api, connection, callback) {\n    this.api = api\n    this.connection = connection\n    this.messageCount = connection.messageCount\n    this.params = connection.params\n    this.callback = callback\n  }\n\n  /**\n   * Increment the total number of executed actions for this connection.\n   *\n   * @param count\n   */\n  incrementTotalActions (count = 1) { this.connection.totalActions += count }\n\n  /**\n   * Increment the pending actions for this connection.\n   *\n   * @param count\n   */\n  incrementPendingActions (count = 1) { this.connection.pendingActions += count }\n\n  /**\n   * Get the number of pending action for this connection.\n   *\n   * @returns {number|*}\n   */\n  getPendingActionCount () { return this.connection.pendingActions }\n\n  /**\n   * Complete the action execution.\n   *\n   * This essentially logs the action execution status.\n   *\n   * @param status\n   */\n  completeAction (status) {\n    let self = this;\n    let error = null;\n\n    // define the action status\n    self.actionStatus = String(status);\n\n    if (status instanceof Error) {\n      error = status;\n    } else if (status === 'server_error') {\n      error = self.api.config.errors.serverErrorMessage\n    } else if (status === 'server_shutting_down') {\n      error = self.api.config.errors.serverShuttingDown\n    } else if (status === 'too_many_requests') {\n      error = self.api.config.errors.tooManyPendingActions()\n    } else if (status === 'unknown_action') {\n      error = self.api.config.errors.unknownAction(self.connection.action);\n    } else if (status === 'unsupported_server_type') {\n      error = self.api.config.errors.unsupportedServerType(self.connection.type)\n    } else if (status === 'missing_params') {\n      error = self.api.config.errors.missingParams(self.missingParams)\n    } else if (status === 'validator_errors') {\n      error = self.api.config.errors.invalidParams(self.validatorErrors)\n    } else if (status) {\n      error = status\n    }\n\n    if (error && typeof error === 'string') {\n      error = new Error(error);\n    }\n\n    if (error && !self.response.error) {\n      self.response.error = error;\n    }\n\n    self.incrementPendingActions(-1);\n    self.duration = new Date().getTime() - self.actionStartTime;\n\n    process.nextTick(function () {\n      if (typeof self.callback === 'function') {\n        self.callback(self);\n      }\n    });\n\n    self.working = false;\n    self.logAction(error);\n  }\n\n  /**\n   * Log the action execution.\n   *\n   * @param error\n   */\n  logAction (error) {\n    let self = this;\n    let logLevel = 'info';\n\n    // check if the action have a specific log level\n    if (self.actionTemplate && self.actionTemplate.logLevel) {\n      logLevel = self.actionTemplate.logLevel;\n    }\n\n    let filteredParams = {};\n    for (let i in self.params) {\n      if (self.api.config.general.filteredParams && self.api.config.general.filteredParams.indexOf(i) >= 0) {\n        filteredParams[ i ] = '[FILTERED]';\n      } else if (typeof self.params[ i ] === 'string') {\n        filteredParams[ i ] = self.params[ i ].substring(0, self.api.config.logger.maxLogStringLength);\n      } else {\n        filteredParams[ i ] = self.params[ i ]\n      }\n    }\n\n    let logLine = {\n      to: self.connection.remoteIP,\n      action: self.action,\n      params: JSON.stringify(filteredParams),\n      duration: self.duration\n    };\n\n    if (error) {\n      if (error instanceof Error) {\n        logLine.error = String(error);\n      } else {\n        try {\n          logLine.error = JSON.stringify(error);\n        } catch (e) {\n          logLine.error = String(error);\n        }\n      }\n    }\n\n    // log the action execution\n    self.api.log(`[ action @  ${self.connection.type}]`, logLevel, logLine);\n  }\n\n  /**\n   * Operations to be performed before the real action execution.\n   *\n   * @param callback Callback function.\n   */\n  preProcessAction (callback) {\n    let self = this\n\n    // if the action is private this can only be executed internally\n    if (self.actionTemplate.private === true && self.connection.type !== 'internal') {\n      callback(self.api.config.errors.privateActionCalled(self.actionTemplate.name))\n      return\n    }\n\n    let processors = []\n    let processorsNames = self.api.actions.globalMiddleware.slice(0)\n\n    // get action processor names\n    if (self.actionTemplate.middleware) { self.actionTemplate.middleware.forEach(m => { processorsNames.push(m) }) }\n\n    processorsNames.forEach(name => {\n      if (typeof self.api.actions.middleware[ name ].preProcessor === 'function') {\n        processors.push(next => { self.api.actions.middleware[ name ].preProcessor(self, next) })\n      }\n    })\n\n    async.series(processors, callback)\n  }\n\n  /**\n   * Operations to be performed after the action execution.\n   *\n   * @param callback\n   */\n  postProcessAction (callback) {\n    let self = this\n    let processors = []\n    let processorNames = self.api.actions.globalMiddleware.slice(0)\n\n    if (self.actionTemplate.middleware) { self.actionTemplate.middleware.forEach(m => { processorNames.push(m) }) }\n\n    processorNames.forEach(name => {\n      if (typeof self.api.actions.middleware[ name ].postProcessor === 'function') {\n        processors.push(next => { self.api.actions.middleware[ name ].postProcessor(self, next) })\n      }\n    })\n\n    async.series(processors, callback)\n  }\n\n  /**\n   * Validate call params with the action requirements.\n   */\n  validateParams () {\n    let self = this\n\n    // iterate inputs definitions of the called action\n    for (let key in self.actionTemplate.inputs) {\n      // get input properties\n      let props = self.actionTemplate.inputs[ key ]\n\n      // default\n      if (self.params[ key ] === undefined && props.default !== undefined) {\n        if (typeof props.default === 'function') {\n          self.params[ key ] = props.default(self.params[ key ], self);\n        } else {\n          self.params[ key ] = props.default;\n        }\n      }\n\n      // convert\n      if (props.convertTo !== undefined) {\n        // Function\n        if (typeof props.convertTo === 'function') {\n          self.params[ key ] = props.convertTo.call(self.api, self.params[ key ], self)\n        } else if (props.convertTo === 'integer') {\n          self.params[ key ] = Number.parseInt(self.params[ key ])\n        } else if (props.convertTo === 'float') {\n          self.params[ key ] = Number.parseFloat(self.params[ key ])\n        } else if (props.convertTo === 'string') {\n          self.params[ key ] = String(self.params[ key ])\n        }\n\n        if (Number.isNaN(self.params[ key ])) {\n          self.validatorErrors.push(self.api.config.errors.paramInvalidType(key, props.convertTo))\n          return\n        }\n      }\n\n      // validator\n      if (props.validator !== undefined) {\n        let validatorResponse = true\n\n        if (typeof props.validator === 'function') {\n          validatorResponse = props.validator.call(self.api, self.params[ key ], self)\n        } else if (typeof props.validator === 'string') {\n          validatorResponse = self.api.validator.validate(props.validator, self.params, key)\n        } else {\n          let pattern = new RegExp(props.validator)\n          validatorResponse = pattern.test(self.params[ key ]) ? true : `Don't match with the validator.`\n        }\n\n        // if an error are present add it to the validatorErrors array\n        if (validatorResponse !== true) { self.validatorErrors.push(validatorResponse) }\n      }\n\n      // required\n      if (props.required === true) {\n        if (self.api.config.general.missingParamChecks.indexOf(self.params[ key ]) >= 0) {\n          self.missingParams.push(key)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the action.\n   */\n  processAction () {\n    let self = this\n\n    // initialize the processing environment\n    self.actionStartTime = new Date().getTime()\n    self.working = true\n    self.incrementTotalActions()\n    self.incrementPendingActions()\n    self.action = self.params.action\n\n    if (self.api.actions.versions[ self.action ]) {\n      if (!self.params.apiVersion) {\n        self.params.apiVersion = self.api.actions.versions[ self.action ][ self.api.actions.versions[ self.action ].length - 1 ]\n      }\n      self.actionTemplate = self.api.actions.actions[ self.action ][ self.params.apiVersion ]\n    }\n\n    if (self.api.running !== true) {\n      self.completeAction('server_shutting_down')\n    } else if (self.getPendingActionCount(self.connection) > self.api.config.general.simultaneousActions) {\n      self.completeAction('too_many_requests')\n    } else if (!self.action || !self.actionTemplate) {\n      self.completeAction('unknown_action')\n    } else if (self.actionTemplate.blockedConnectionTypes && self.actionTemplate.blockedConnectionTypes.indexOf(self.connection.type) >= 0) {\n      self.completeAction('unsupported_server_type')\n    } else {\n      try {\n        self.runAction()\n      } catch (err) {\n        self.api.exceptionHandlers.action(err, self, () => self.completeAction('server_error'))\n      }\n    }\n  }\n\n  /**\n   * Run an action.\n   */\n  runAction () {\n    let self = this\n\n    self.preProcessAction(error => {\n      // validate the request params with the action requirements\n      self.validateParams()\n\n      if (error) {\n        self.completeAction(error);\n      } else if (self.missingParams.length > 0) {\n        self.completeAction('missing_params')\n      } else if (self.validatorErrors.length > 0) {\n        self.completeAction('validator_errors')\n      } else if (self.toProcess === true && !error) {\n        // execute the action logic\n        self.actionTemplate.run(self.api, self, error => {\n          if (error) {\n            self.completeAction(error)\n          } else {\n            self.postProcessAction(error => self.completeAction(error))\n          }\n        });\n      } else {\n        self.completeAction()\n      }\n    })\n  }\n}\n\n/**\n * Action processor Satellite.\n */\nexport default class {\n\n  /**\n   * Initializer load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 430\n\n  /**\n   * Satellite loading function.\n   *\n   * @param api   API reference object.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // load action processor to the API\n    api.actionProcessor = ActionProcessor\n\n    // finish the load\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}