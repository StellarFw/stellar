{"version":3,"sources":["satellites/config.js"],"names":[],"mappings":"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","file":"satellites/config.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport Utils from '../utils'\n\nclass ConfigManager {\n\n  /**\n   * Api reference object.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Files to watch for changes.\n   *\n   * @type {Array}\n   * @private\n   */\n  _watchedFiles = []\n\n  /**\n   * Create a new instance of the ConfigManager.\n   *\n   * @param api API reference object.\n   */\n  constructor (api) { this.api = api }\n\n  /**\n   * Start the config execution.\n   */\n  execute (next) {\n    // init the execution environment\n    this._setupEnvironment()\n\n    // creates 'temp' folder if it does not exist\n    this._createTempFolder()\n\n    // load manifest file, and core, project and modules configs\n    this._loadConfigs()\n\n    // finish the config execution on the next tick\n    process.nextTick(next)\n  }\n\n  /**\n   * Setup the execution  environment.\n   *\n   * This define what environment should be used.\n   *\n   * TODO: use the command line arguments to define the environment\n   */\n  _setupEnvironment () {\n    let self = this\n\n    // if (argv.NODE_ENV) {\n    //   self.api.env = argv.NODE_ENV\n    // } else\n    if (process.env.NODE_ENV) {\n      self.api.env = process.env.NODE_ENV\n    } else {\n      self.api.env = 'development'\n    }\n  }\n\n  /**\n   * Unwatch all files.\n   */\n  unwatchAllFiles () {\n    let self = this\n\n    // iterate all watched files and say to the FS to stop watch the changes\n    for (let i in self._watchedFiles) {\n      fs.unwatchFile(self._watchedFiles[ i ])\n    }\n\n    // reset the watch array\n    self._watchedFiles = []\n  }\n\n  /**\n   * Start watching for changes on a file and set a function to be executed\n   * on the file change.\n   *\n   * @param file      File path\n   * @param callback  Callback function.\n   */\n  watchFileAndAct (file, callback) {\n    let self = this\n\n    // normalise file path\n    file = path.normalize(file)\n\n    // check if file exists\n    if (!fs.existsSync(file)) { throw new Error(`${file} does not exist, and cannot be watched`) }\n\n    // the watch for files change only works on development mode\n    if (self.api.config.general.developmentMode !== true || self._watchedFiles.indexOf(file) > 0) { return }\n\n    // push the new file to the array of watched files\n    self._watchedFiles.push(file)\n\n    // say to the FS to start watching for changes in this file with an interval of 1 seconds\n    fs.watchFile(file, { interval: 1000 }, (curr, prev) => {\n      if (curr.mtime > prev.mtime && self.api.config.general.developmentMode === true) {\n        process.nextTick(() => {\n          let cleanPath = file\n\n          // we need to replace the '/' by '\\'\n          if (process.platform === 'win32') { cleanPath = file.replace(/\\//g, '\\\\') }\n\n          // remove file from require cache to force reload the file\n          delete require.cache[ require.resolve(cleanPath) ]\n\n          // execute the callback function\n          callback(file)\n        })\n      }\n    })\n  }\n\n  /**\n   * Reboot handler.\n   *\n   * This is executed when a config file is changed.\n   *\n   * @param file  File path who as changed.\n   * @private\n   */\n  _rebootCallback (file) {\n    let self = this\n\n    self.api.log(`\\r\\n\\r\\n*** rebooting due to config change (${file}) ***\\r\\n\\r\\n`, 'info')\n    delete require.cache[ require.resolve(file) ]\n    self.api.commands.restart.call(self.api._self)\n  }\n\n  _loadConfigs () {\n    let self = this\n\n    // set config object on API\n    self.api.config = {}\n\n    try {\n      // read project manifest\n      self.api.config = require(`${self.api.scope.rootPath}/manifest.json`)\n    } catch (e) {\n      // when the project manifest doesn't exists the user is informed\n      // and the engine instance is terminated\n      self.api.log('Project `manifest.json` file does not exists.', 'emergency')\n\n      // finish process (we can not stop the Engine because it can not be run)\n      process.exit(1)\n    }\n\n    // load the default config files from the Stellar core\n    self.loadConfigDirectory(__dirname + '/../config')\n\n    // load all the configs from the modules\n    self.api.config.modules.forEach(moduleName => self.loadConfigDirectory(`${self.api.scope.rootPath}/modules/${moduleName}/config`, true))\n\n    // load the config files from the current universe if exists\n    // the platform should be reloaded when the project configs changes\n    self.loadConfigDirectory(`${self.api.scope.rootPath}/config`, true)\n  }\n\n  /**\n   * Load a directory as a config repository.\n   *\n   * @param configPath\n   * @param watch\n   */\n  loadConfigDirectory (configPath, watch = false) {\n    let self = this\n\n    // get all files from the config folder\n    let configFiles = Utils.recursiveDirectoryGlob(configPath)\n\n    let loadRetries = 0\n    let loadErrors = {}\n\n    for (let i = 0, limit = configFiles.length; (i < limit); i++) {\n      // get the next file to be loaded\n      let file = configFiles[ i ]\n\n      try {\n        // attempt configuration file load\n        let localConfig = require(file)\n        if (localConfig.default) { self.api.config = Utils.hashMerge(self.api.config, localConfig.default, self.api) }\n        if (localConfig[ self.api.env ]) { self.api.config = Utils.hashMerge(self.api.config, localConfig[ self.api.env ], self.api) }\n\n        // configuration file load success: clear retries and errors since progress\n        // has been made\n        loadRetries = 0\n        loadErrors = {}\n\n        // configuration file loaded: set watch\n        if (watch !== false) { self.watchFileAndAct(file, self._rebootCallback.bind(self)) }\n      } catch (error) {\n        // error loading configuration, abort if all remaining configuration files\n        // have been tried and failed indicating inability to progress\n        loadErrors[ file ] = error.toString()\n        if (++loadRetries === limit - i) {\n          throw new Error('Unable to load configurations, errors: ' + JSON.stringify(loadErrors))\n        }\n        // adjust configuration files list: remove and push failed configuration to\n        // the end of the list and continue with next file at same index\n        configFiles.push(configFiles.splice(i--, 1)[ 0 ])\n      }\n    }\n  }\n\n  /**\n   * Creates the 'temp' folder if it does not exist.\n   *\n   * This folder is used to store the log files.\n   *\n   * @private\n   */\n  _createTempFolder () {\n    let self = this\n\n    if (!Utils.directoryExists(`${self.api.scope.rootPath}/temp`)) {\n      Utils.createFolder(`${self.api.scope.rootPath}/temp`)\n    }\n  }\n}\n\n/**\n * This initializer loads all app configs to the current running instance.\n */\nexport default class {\n\n  /**\n   * Load priority.\n   *\n   * This initializer needs to be loaded first of all\n   * others.\n   *\n   * @type {number}\n   */\n  loadPriority = 0\n\n  /**\n   * Load satellite function.\n   *\n   * @param api   API object reference.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // put the config instance available on the API object\n    api.configs = new ConfigManager(api)\n\n    // start the config manager execution\n    api.configs.execute(next)\n  }\n\n  /**\n   * Start satellite function.\n   *\n   * @param api   Api object reference.\n   * @param next  Callback function.\n   */\n  start (api, next) {\n    // print out the current environment\n    api.log(`environment: ${api.env}`, 'notice')\n\n    // finish the satellite start\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}