{"version":3,"sources":["satellites/modules.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;IAMM,O;;;;;;;;;;;;;;;;;;AA+BJ,mBAAa,GAAb,EAAkB;AAAA;;AAAA,SAxBlB,GAwBkB,GAxBZ,IAwBY;AAAA,SAdlB,aAckB,GAdF,IAAI,GAAJ,EAcE;AAAA,SAPlB,YAOkB,GAPH,IAAI,GAAJ,EAOG;AAAE,SAAK,GAAL,GAAW,GAAX;AAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;kCAQrB;AACb,UAAI,OAAO,IAAX;;;AAGA,UAAI,UAAU,KAAK,GAAL,CAAS,MAAT,CAAgB,OAA9B;;;AAGA,UAAI,gBAAM,eAAN,CAAyB,KAAK,GAAL,CAAS,KAAT,CAAe,QAAxC,sBAAJ,EAAyE;AAAE,gBAAQ,IAAR,CAAa,SAAb;AAAyB;;;;AAIpG,UAAI,YAAY,SAAZ,IAAyB,QAAQ,MAAR,KAAmB,CAAhD,EAAmD;AACjD,aAAK,IAAI,KAAJ,CAAU,yCAAV,CAAL;;;AAGA,gBAAQ,IAAR,CAAa,CAAb;AACD;;;AAGD,cAAQ,OAAR,CAAgB,sBAAc;;AAE5B,YAAI,OAAU,KAAK,GAAL,CAAS,KAAT,CAAe,QAAzB,iBAA6C,UAAjD;;;AAGA,YAAI,WAAW,QAAW,IAAX,oBAAf;;;AAGA,aAAK,aAAL,CAAmB,GAAnB,CAAuB,SAAS,EAAhC,EAAoC,QAApC;;;AAGA,aAAK,YAAL,CAAkB,GAAlB,CAAsB,SAAS,EAA/B,EAAmC,IAAnC;AACD,OAZD;AAaD;;;;;;;;;;;;;2CAUuB,I,EAAM;AAC5B,UAAI,OAAO,IAAX;;;AAGA,UAAI,gBAAM,UAAN,CAAoB,KAAK,GAAL,CAAS,KAAT,CAAe,QAAnC,mBAAJ,EAAiE;AAAE,eAAO,MAAP;AAAe;;;AAGlF,UAAI,kBAAkB,EAAtB;;;AAGA,WAAK,aAAL,CAAmB,OAAnB,CAA2B,oBAAY;;AAErC,YAAI,SAAS,eAAT,KAA6B,SAAjC,EAA4C;;AAE1C,4BAAkB,gBAAM,SAAN,CAAgB,eAAhB,EAAiC,SAAS,eAA1C,CAAlB;AACD;AACF,OAND;;;AASA,UAAI,cAAc;AAChB,iBAAS,IADO;AAEhB,cAAM,sBAFU;AAGhB,iBAAS,OAHO;AAIhB,qBAAa,6CAJG;AAKhB,sBAAc;AALE,OAAlB;;;AASA,mBAAG,aAAH,CAAoB,KAAK,GAAL,CAAS,KAAT,CAAe,QAAnC,oBAA4D,KAAK,SAAL,CAAe,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAA5D,EAAkG,MAAlG;;AAEA,WAAK,GAAL,CAAS,GAAT,CAAa,uBAAb,EAAsC,MAAtC;;;AAGA,+BAAK,aAAL,EAAoB,iBAAS;;AAE3B,YAAI,KAAJ,EAAW;AACT,eAAK,GAAL,CAAS,GAAT,CAAa,gDAAb,EAA+D,WAA/D;AACA,kBAAQ,IAAR,CAAa,CAAb;AACD;;;AAGD,aAAK,GAAL,CAAS,GAAT,CAAa,2BAAb,EAA0C,MAA1C;;;AAGA;AACD,OAZD;AAaD;;;;;;;;;;;;;;;;SAeD,Y,GAAe,C;;;;;;;;;;;;;;;;;;;;yBAQT,G,EAAK,I,EAAM;;AAEf,UAAI,OAAJ,GAAc,IAAI,OAAJ,CAAY,GAAZ,CAAd;;;AAGA,UAAI,OAAJ,CAAY,WAAZ;;;AAGA,UAAI,OAAJ,CAAY,sBAAZ,CAAmC,IAAnC;AACD","file":"satellites/modules.js","sourcesContent":["import fs from 'fs'\nimport Utils from '../utils'\nimport { exec } from 'child_process'\n\n/**\n * This class is responsible to manage all modules, process\n * the NPM dependencies.\n */\nclass Modules {\n\n  /**\n   * API reference object.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Map with the active modules.\n   *\n   * Keys are the modules slugs and the values are\n   * their manifests.\n   *\n   * @type {Map}\n   */\n  activeModules = new Map()\n\n  /**\n   * Map with the modules paths.\n   *\n   * @type {Map}\n   */\n  modulesPaths = new Map()\n\n  /**\n   * Create a new class instance.\n   *\n   * @param api\n   */\n  constructor (api) { this.api = api }\n\n  /**\n   * Load all active modules into memory.\n   *\n   * The private module is always loaded even if not present on the\n   * activeModules property.\n   */\n  loadModules () {\n    let self = this\n\n    // get active modules\n    let modules = self.api.config.modules\n\n    // check if the private module folder exists\n    if (Utils.directoryExists(`${self.api.scope.rootPath}/modules/private`)) { modules.push('private') }\n\n    // this config is required. If doesn't exists or is an empty array\n    // an exception should be raised.\n    if (modules === undefined || modules.length === 0) {\n      next(new Error('At least one module needs to be active.'))\n\n      // engine don't finish the starting wet, soo we need to finish the process\n      process.exit(1)\n    }\n\n    // load all modules manifests\n    modules.forEach(moduleName => {\n      // build the full path\n      let path = `${self.api.scope.rootPath}/modules/${moduleName}`\n\n      // get module manifest file content\n      let manifest = require(`${path}/manifest.json`)\n\n      // save the module config on the engine instance\n      self.activeModules.set(manifest.id, manifest)\n\n      // save the module full path\n      self.modulesPaths.set(manifest.id, path)\n    })\n  }\n\n  /**\n   * Process all NPM dependencies.\n   *\n   * The npm install command only is executed if the package.json\n   * file are not present.\n   *\n   * @param next    Callback function.\n   */\n  processNpmDependencies (next) {\n    let self = this\n\n    // if the `package.json` file already exists don't search for NPM dependencies\n    if (Utils.fileExists(`${self.api.scope.rootPath}/package.json`)) { return next() }\n\n    // global npm dependencies\n    let npmDependencies = {}\n\n    // iterate all active modules\n    self.activeModules.forEach(manifest => {\n      // check if the module have NPM dependencies\n      if (manifest.npmDependencies !== undefined) {\n        // merge the two hashes\n        npmDependencies = Utils.hashMerge(npmDependencies, manifest.npmDependencies)\n      }\n    })\n\n    // compile project information\n    let projectJson = {\n      private: true,\n      name: 'stellar-dependencies',\n      version: '1.0.0',\n      description: 'This is automatically generated don\\'t edit',\n      dependencies: npmDependencies\n    }\n\n    // generate project.json file\n    fs.writeFileSync(`${self.api.scope.rootPath}/package.json`, JSON.stringify(projectJson, null, 2), 'utf8')\n\n    self.api.log('updating NPM packages', 'info')\n\n    // run npm command\n    exec('npm install', error => {\n      // if an error occurs finish the process\n      if (error) {\n        self.api.log('An error occurs during the NPM install command', 'emergency')\n        process.exit(1)\n      }\n\n      // load a success message\n      self.api.log('NPM dependencies updated!', 'info')\n\n      // finish the loading process\n      next()\n    })\n  }\n\n}\n\n/**\n * This initializer loads all active modules configs to the\n * engine instance.\n */\nexport default class {\n\n  /**\n   * Initializer load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 1\n\n  /**\n   * Initializer load function.\n   *\n   * @param api   API reference.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // instantiate the manager\n    api.modules = new Modules(api)\n\n    // load modules into memory\n    api.modules.loadModules()\n\n    // process NPM dependencies\n    api.modules.processNpmDependencies(next)\n  }\n\n}\n"],"sourceRoot":"/source/"}