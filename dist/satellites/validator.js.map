{"version":3,"sources":["satellites/validator.js"],"names":[],"mappings":"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","file":"satellites/validator.js","sourcesContent":["/**\n * This class allow developers testes values against a\n * set of validators.\n *\n * This is used by the ActionProcessor to validator the\n * action input params.\n *\n * You can use this manually like this:\n *\n * <code>\n *   api.validator.validate(validatorString, params, keyToValidate)\n * </code>\n */\nclass Validator {\n\n  /**\n   * API reference object.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Request parameters.\n   *\n   * @type {{}}\n   */\n  params = {}\n\n  /**\n   * Array with the implicit validators.\n   *\n   * @type {string[]}\n   */\n  static implicitValidators = [\n    'required_if',\n    'required',\n    'required_unless',\n    'filled',\n    'required_with',\n    'required_with_all',\n    'required_without',\n    'required_without_all'\n  ]\n\n  /**\n   * Create a new Validator instance.\n   *\n   * @param api API reference object.\n   */\n  constructor (api) { this.api = api }\n\n  /**\n   * Validate a set of parameters using a validator string.\n   *\n   *\n   * @param validatorString   Validator string\n   * @param params            Set of params.\n   * @param key               Param under validation.\n   * @returns {*}             Validator response. True if it's okay\n   */\n  validate (validatorString, params, key) {\n    let self = this\n\n    // the key must be present, otherwise return an error string\n    if (key === undefined || key === null || key === '') { return 'a key must be specified' }\n\n    // save parameters request parameters\n    self.params = params\n\n    // gets the value of the parameter to be validated\n    let value = params[key]\n\n    // the validator string can have many validators separated by '|', we need to split them\n    let validators = validatorString.split('|')\n\n    // save the validator response\n    let validatorResponse\n\n    // iterate all validators and execute them\n    for (let index in validators) {\n      // split by ':' to get the validator arguments\n      let validatorParts = validators[ index ].split(':')\n\n      // if the property has undefined only implicit validators can be applied\n      if (value === undefined && Validator.implicitValidators.indexOf(validatorParts[ 0 ]) === -1) {\n        continue\n      }\n\n      // call the validator\n      validatorResponse = self.execValidator(validatorParts[ 0 ], validatorParts[ 1 ], value, key)\n\n      // if the response is a string that means we found a invalid validator\n      if (typeof validatorResponse === 'string') { break }\n\n      // if the validator fails return a fail message\n      if (validatorResponse === false) {\n        validatorResponse = `don't match with the validator`\n        break\n      }\n    }\n\n    // clean the parameters property\n    self.params = {}\n\n    return validatorResponse\n  }\n\n  /**\n   * Execute the request validator and apply it to the passed value.\n   *\n   * @param validator   Validator name.\n   * @param args        Validator arguments.\n   * @param value       Value to be validated.\n   * @param key         Parameter key name.\n   * @returns {*}\n   */\n  execValidator (validator, args, value, key) {\n    // call the validator function\n    let funcName = `validator_${validator}`\n\n    // check if the validator exists\n    if (this[ funcName ] === undefined) { return 'invalid validator' }\n\n    // split the arguments by ',' if exists\n    if (args !== undefined) { args = args.split(',') }\n\n    // call the validator function\n    return this[ funcName ](value, args, key)\n  }\n\n  // ------------------------------------------------------------------------------------------------------ [Validators]\n\n  /**\n   * Check if the value is a string only with alpha characters.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_alpha (value) { return /^[a-zA-Z]*$/.test(value) }\n\n  /**\n   * Check if the value is a number.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_alpha_num (value) { return /^[a-zA-Z0-9]*$/.test(value) }\n\n  /**\n   * Check if the value is a string only with alpha or (_, -) characters.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_alpha_dash (value) { return /^[a-zA-Z0-9-_]*$/.test(value) }\n\n  /**\n   * Check if the value is an array.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_array (value) { return Array.isArray(value) }\n\n  /**\n   * Check if the value is before than the specified date.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_before (value, args) {\n    // check if the developer specify an argument\n    if (args === undefined) { return 'you need to specify an argument' }\n\n    // check if the argument is a date\n    if (isNaN(Date.parse(args))) { return 'the specified argument is not a valid date' }\n\n    // check if the value if a date\n    if (isNaN(Date.parse(value))) { return 'the specified value is not a valid date' }\n\n    // check if the specified date is less than the required date\n    return Date.parse(value) < Date.parse(args)\n  }\n\n  /**\n   * Check if the value is between the two intervals.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_between (value, args) {\n    // check if the developer specify the valid number of arguments\n    if (!Array.isArray(args) || args.length !== 2) { return 'invalid validator arguments' }\n\n    // check if the value is valid\n    if (typeof value === 'string') {\n      return value.length >= args[ 0 ] && value.length <= args[ 1 ]\n    } else if (typeof value === 'number') {\n      return value >= args[ 0 ] && value <= args[ 1 ]\n    } else {\n      return 'invalid data type'\n    }\n  }\n\n  /**\n   * Check if the value is a boolean.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_boolean (value) { return typeof value === 'boolean' }\n\n  /**\n   * Check if exists a confirmation fields to the testing key with the same name.\n   *\n   * @param value\n   * @param args\n   * @param key\n   * @returns {*}\n   */\n  validator_confirmed (value, args, key) {\n    // build the confirmation field name\n    let confirmationFieldName = `${key}_confirmation`\n\n    // check if the confirmation field are not present\n    if (this.params[ confirmationFieldName ] === undefined) { return 'the confirmation field are not present' }\n\n    // check if the values of two fields match\n    if (this.params[ confirmationFieldName ] !== value) { return 'the values not match' }\n\n    return true\n  }\n\n  /**\n   * Check if the param is a date.\n   *\n   * @param value\n   * @returns {*}\n   */\n  validator_date (value) {\n    if (isNaN(Date.parse(value))) { return 'the specified value is not a valid date' }\n    return true\n  }\n\n  /**\n   * Check if the value is different of the other field.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_different (value, args) {\n    // check if the validator has the correct parameter number\n    if (args === undefined) { return 'the validator need one argument' }\n\n    return value !== this.params[ args ]\n  }\n\n  /**\n   * Check if the value is an email.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_email (value) {\n    return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(value)\n  }\n\n  /**\n   * Check if the value is filled.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_filled (value) { return value !== undefined && value !== null && value !== '' }\n\n  /**\n   * Check if the value are included in the array.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_in (value, args) {\n    // check if the validator have a name\n    if (args === undefined && !Array.isArray(args)) { return 'validator needs an array' }\n\n    // check if the array contains the value\n    return args.indexOf(String(value)) > -1\n  }\n\n  /**\n   * Check if the value are not included in the array.\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_not_in (value, args) {\n    // check if the validator have a name\n    if (args === undefined && !Array.isArray(args)) { return 'validator needs an array' }\n\n    // check if the array not contains the value\n    return args.indexOf(String(value)) === -1\n  }\n\n  /**\n   * Check if the value is an integer.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_integer (value) {\n    // try parse to pin\n    let parsedValue = Number.parseInt(value)\n\n    // check if is a number\n    return Number.isInteger(parsedValue)\n  }\n\n  /**\n   * Check if the value is an IP.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_ip (value) { return /^(?!0)(?!.*\\.$)((1?\\d?\\d|25[0-5]|2[0-4]\\d)(\\.|$)){4}$/.test(value) }\n\n  /**\n   * Check if the field is a valid JSON.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_json (value) {\n    try {\n      let o = JSON.parse(value)\n\n      if (o && typeof o === \"object\" && o !== null) { return true }\n    } catch (e) {}\n\n    return false\n  }\n\n  /**\n   * Check if the parameter match with a max value.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_max (value, args) {\n    // the validator needs one argument\n    if (args === undefined) { return 'validator need at least one argument' }\n\n    if (typeof value === 'string' || value instanceof Array) {\n      return value.length <= args[ 0 ]\n    } else if (typeof value === 'number') {\n      return value <= args[ 0 ]\n    } else {\n      return 'invalid type'\n    }\n  }\n\n  /**\n   * Check if the parameter match with a min value.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_min (value, args) {\n    // the validator needs one argument\n    if (args === undefined) { return 'validator need at least one argument' }\n\n    if (typeof value === 'string' || value instanceof Array) {\n      return value.length >= args[ 0 ]\n    } else if (typeof value === 'number') {\n      return value >= args[ 0 ]\n    } else {\n      return 'invalid type'\n    }\n  }\n\n  /**\n   * Check if the value exists.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_required (value) { return value !== undefined }\n\n  /**\n   * Check if the value is numeric.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_numeric (value) { return typeof value === 'number' }\n\n  /**\n   * Check if the field is required taking into account\n   * the parameters.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_required_if (value, args) {\n    // check if we have the needs arguments\n    if (!(args instanceof Array) || args.length < 2) { return 'validator need two arguments' }\n\n    // get the parameter to test\n    let parameterToCheck = args.shift()\n\n    // if the args[0] param value is present in the values array the value is required\n    if (args.indexOf(String(this.params[ parameterToCheck ])) > -1) { return this.validator_filled(value) }\n\n    return true\n  }\n\n  /**\n   * The field under validation must be present unless\n   * the args[0] is equal to any value.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_required_unless (value, args) {\n    // check if we have the needs arguments\n    if (!(args instanceof Array) || args.length < 2) { return 'validator need two arguments' }\n\n    // get the parameter to test\n    let parameterToCheck = args.shift()\n\n    // if the parameter not have a valid value the current parameter is required\n    if (args.indexOf(String(this.params[ parameterToCheck ])) === -1) { return this.validator_filled(value) }\n\n    return true\n  }\n\n  /**\n   * The field under validation must be present only if\n   * any of the other specified fields are present.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_required_with (value, args) {\n    // check if we have the needs arguments\n    if (!(args instanceof Array) || args.length < 2) { return 'validator need two arguments' }\n\n    // check if one of the parameters are present\n    for (let index in args) {\n      // get parameter name\n      let paramName = args[ index ]\n\n      // check if the value is filled\n      if (this.params[ paramName ] !== undefined) { return this.validator_filled(value) }\n    }\n\n    return true\n  }\n\n  /**\n   * The field under validation must be present only if\n   * all of the other specified fields are present.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_required_with_all (value, args) {\n    // check if we have the needs arguments\n    if (!(args instanceof Array) || args.length < 2) { return 'validator need two arguments' }\n\n    // check if all the parameters are present\n    for (let index in args) {\n      // get parameter name\n      let paramName = args[ index ]\n\n      if (this.params[ paramName ] === undefined) { return true }\n    }\n\n    // if all the fields are present the fields under validation is required\n    return this.validator_filled(value)\n  }\n\n  /**\n   * The field under validation must be present only when\n   * any of the other specified fields are not present.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_required_without (value, args) {\n    // check if we have the needs arguments\n    if (!(args instanceof Array) || args.length < 2) { return 'validator need two arguments' }\n\n    // if one of the fields are not present the field under validation is required\n    for (let index in args) {\n      // get parameter name\n      let paramName = args[ index ]\n\n      if (this.params[ paramName ] === undefined) { return this.validator_filled(value) }\n    }\n\n    return true\n  }\n\n  /**\n   * The field under validation must be present only when\n   * all of the other specified fields are not present.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_required_without_all (value, args) {\n    // check if we have the needs arguments\n    if (!(args instanceof Array) || args.length < 2) { return 'validator need two arguments' }\n\n    for (let index in args) {\n      // get parameter name\n      let paramName = args[ index ]\n\n      // if one of the fields are not present we can stop right here\n      if (this.params[ paramName ] !== undefined) { return true }\n    }\n\n    return this.validator_filled(value)\n  }\n\n  /**\n   * The given field must match the field under validation.\n   *\n   * @param value\n   * @param args\n   * @returns {*}\n   */\n  validator_same (value, args) {\n    // check if we have the needs arguments\n    if (!(args instanceof Array) || args.length < 1) { return 'validator need one argument' }\n\n    return this.params[ args[ 0 ] ] === value\n  }\n\n  /**\n   * The field under validation must have a size matching the given value.\n   *\n   * @param value\n   * @param args\n   */\n  validator_size (value, args) {\n    // check if we have the needs arguments\n    if (!(args instanceof Array) || isNaN(args[ 0 ])) { return 'validator need one numeric argument' }\n\n    if (typeof value === 'string' || value instanceof Array) {\n      return value.length == args[ 0 ]\n    } else if (typeof value === 'number') {\n      return value == args[ 0 ]\n    } else {\n      return 'invalid type'\n    }\n  }\n\n  /**\n   * The field under validation must be a valid URL.\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  validator_url (value) {\n    return /^(http|ftp|https):\\/\\/[\\w-]+(\\.[\\w-]*)+([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/~+#-])?$/.test(value)\n  }\n\n}\n\n/**\n * Validator satellite.\n */\nexport default class {\n\n  /**\n   * Satellite priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 400\n\n  /**\n   * Satellite load function.\n   *\n   * @param api   API reference object.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // load validator logic into the API object\n    api.validator = new Validator(api)\n\n    // finish the load process\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}