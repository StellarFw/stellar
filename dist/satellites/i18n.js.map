{"version":3,"sources":["satellites/i18n.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEM,I;;;;;;;;;;;;;AAiBJ,gBAAa,GAAb,EAAkB;AAAA;;AAChB,QAAI,OAAO,IAAX;;;AAGA,SAAK,GAAL,GAAW,GAAX;;;AAGA,SAAK,IAAL;AACD;;;;;;;;;;;;;;gCAKY;AACX,UAAI,OAAO,IAAX;;;;;AAKA,UAAI,aAAa,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB,KAAxB,CAA8B,IAA9B,GAAqC,SAAtD;AACA,sBAAM,eAAN,CAAsB,UAAtB;AACA,mBAAG,SAAH,CAAa,UAAb;;;AAGA,WAAK,IAAI,MAAT,IAAmB,KAAK,GAAL,CAAS,OAAT,CAAiB,aAAjB,CAA+B,IAA/B,EAAnB,EAA0D;AACxD,YAAI,cAAgB,KAAK,GAAL,CAAS,KAAT,CAAe,QAA/B,iBAAmD,MAAnD,YAAJ;;;AAGA,YAAI,gBAAM,eAAN,CAAsB,WAAtB,CAAJ,EAAuC;;AAEtC;AACF;;;AAGD,UAAI,UAAU,KAAK,GAAL,CAAS,MAAT,CAAgB,IAA9B;;;AAGA,cAAQ,SAAR,GAAoB,UAApB;;;AAGA,WAAK,IAAL,CAAU,SAAV,CAAoB,OAApB;;;AAGA,WAAK,IAAL,CAAU,SAAV,CAAoB,KAAK,GAAL,CAAS,MAAT,CAAgB,IAAhB,CAAqB,aAAzC;AACD;;;;;;;;;;8CAO0B,U,EAAY;AAAE,aAAO,KAAK,GAAL,CAAS,MAAT,CAAgB,IAAhB,CAAqB,aAA5B;AAA2C;;;;;;;;;;2CAO5D,U,EAAY;AAClC,UAAI,OAAO,IAAX;;;AAGA,UAAI,WAAW,KAAK,GAAL,CAAS,MAAT,CAAgB,IAAhB,CAAqB,yBAArB,CAA+C,KAA/C,CAAqD,GAArD,CAAf;;;AAGA,UAAI,MAAM,SAAS,KAAT,EAAV;;;AAGA,UAAI,QAAQ,KAAZ,EAAmB;AAAE,cAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AAAyE;;;AAG9F,UAAI,SAAS,mBAAiB,SAAS,IAAT,CAAc,GAAd,CAAjB,kBAAb;;;AAGA,WAAK,IAAL,CAAU,SAAV,CAAoB,UAApB,EAAgC,MAAhC;AACD;;;;;;;;;;;;6BASS,O,EAAS,O,EAAS;AAC1B,UAAI,OAAO,IAAX;;;AAGA,UAAI,CAAC,MAAM,OAAN,CAAc,OAAd,CAAL,EAA6B;AAAE,kBAAU,CAAE,OAAF,CAAV;AAAuB;;AAEtD,UAAI,CAAC,OAAL,EAAc;AAAE,kBAAU,KAAK,IAAf;AAAqB;;AAErC,aAAO,KAAK,IAAL,CAAU,EAAV,CAAa,KAAb,CAAmB,OAAnB,EAA4B,OAA5B,CAAP;AACD;;;;;;;;;;;;;;;;;SAgBD,Y,GAAe,E;;;;;;;;;;;;;;;;;;;;yBAQT,G,EAAK,I,EAAM;;AAEf,UAAI,IAAJ,GAAW,IAAI,IAAJ,CAAS,GAAT,CAAX;;;AAGA,UAAI,IAAJ,CAAS,SAAT;;;AAGA;AACD","file":"satellites/i18n.js","sourcesContent":["import fs from 'fs'\nimport i18n from 'i18n'\nimport Utils from '../utils'\n\nclass I18n {\n\n  /**\n   * Stellar api object.\n   */\n  api\n\n  /**\n   * i18n instance.\n   */\n  i18n\n\n  /**\n   * Constructor.\n   *\n   * @param api   API reference.\n   */\n  constructor (api) {\n    let self = this\n\n    // save api reference\n    self.api = api\n\n    // save i18n instance\n    self.i18n = i18n\n  }\n\n  /**\n   * Configure i18n.\n   */\n  configure () {\n    let self = this\n\n    // @todo - copy all modules locale folder to a temp folder '/tmp/locale'\n\n    // create locale folder (remove first if exists)\n    let localePath = self.api.config.general.paths.temp + '/locale'\n    Utils.removeDirectory(localePath)\n    fs.mkdirSync(localePath)\n\n    // iterate all modules\n    for (let module in self.api.modules.activeModules.keys()) {\n      let localePath = `${self.api.scope.rootPath}/modules/${module}/locale`\n\n      // check if the folder exists\n      if (Utils.directoryExists(localePath)) {\n        // copy all files to temp locale folder\n      }\n    }\n\n    // get i18n configs\n    let options = self.api.config.i18n\n\n    // define locale folder\n    options.directory = localePath\n\n    // configure application\n    self.i18n.configure(options)\n\n    // setting the current locale globally\n    self.i18n.setLocale(self.api.config.i18n.defaultLocale)\n  }\n\n  /**\n   * Determine the current client locale from connection.\n   *\n   * @param connection  Client connection object.\n   */\n  determineConnectionLocale (connection) { return this.api.config.i18n.defaultLocale }\n\n  /**\n   * Invoke the connection locale method.\n   *\n   * @param connection  Client connection object.\n   */\n  invokeConnectionLocale (connection) {\n    let self = this\n\n    // split the command by '.'\n    let cmdParts = self.api.config.i18n.determineConnectionLocale.split('.')\n\n    // get the first array position\n    let cmd = cmdParts.shift()\n\n    // this only works with the api object\n    if (cmd !== 'api') { throw new Error('cannot operate on a method outside of the api object') }\n\n    // execute method\n    let locale = eval(`self.api.${cmdParts.join('.')}(connection)`)\n\n    // set locale\n    self.i18n.setLocale(connection, locale)\n  }\n\n  /**\n   * Localize a message.\n   *\n   * @param message   Message to be localized.\n   * @param options   Localization options.\n   * @returns {*}     Localized message.\n   */\n  localize (message, options) {\n    let self = this\n\n    // the arguments should be an array\n    if (!Array.isArray(message)) { message = [ message ] }\n\n    if (!options) { options = self.i18n }\n\n    return self.i18n.__.apply(options, message)\n  }\n\n}\n\n/**\n * Initializer class.\n *\n * This initializer adds support to i18n localization.\n */\nexport default class {\n\n  /**\n   * Load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 10\n\n  /**\n   * Load initializer method.\n   *\n   * @param api   Stellar api object.\n   * @param next  Callback.\n   */\n  load (api, next) {\n    // add i18n class to the api object\n    api.i18n = new I18n(api)\n\n    // configure i18n\n    api.i18n.configure()\n\n    // call callback\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}