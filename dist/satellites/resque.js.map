{"version":3,"sources":["satellites/resque.js"],"names":[],"mappings":"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","file":"satellites/resque.js","sourcesContent":["import NR from 'node-resque'\n\n/**\n * Node-Resque manager.\n */\nclass ResqueManager {\n\n  /**\n   * API reference object.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Node-resque instance.\n   *\n   * @type {null}\n   */\n  queue = null\n\n  /**\n   * Node-resque multi worker instance.\n   *\n   * @type {null}\n   */\n  multiWorker = null\n\n  /**\n   * Node-resque scheduler instance.\n   *\n   * @type {null}\n   */\n  scheduler = null\n\n  /**\n   * Object with the connection details.\n   *\n   * @type {null}\n   */\n  connectionDetails = null\n\n  /**\n   * Create a new instance of ResqueManager class.\n   *\n   * @param api API reference object.\n   */\n  constructor (api) {\n    let self = this\n\n    // save the API object reference\n    self.api = api\n\n    // define the connection details, we can use the redis property from the tasks\n    self.connectionDetails = {redis: api.redis.clients.tasks}\n  }\n\n  /**\n   * Start queue.\n   *\n   * @param callback Callback function.\n   */\n  startQueue (callback) {\n    let self = this\n\n    self.queue = new NR.queue({connection: self.connectionDetails}, self.api.tasks.jobs)\n    self.queue.on('error', error => { self.api.log(error, 'error', '[api.resque.scheduler]') })\n    self.queue.connect(callback)\n  }\n\n  /**\n   * Start the scheduler system.\n   *\n   * @param callback  Callback function.\n   */\n  startScheduler (callback) {\n    let self = this\n\n    if (self.api.config.tasks.scheduler !== true) {\n      callback()\n      return\n    }\n\n    // get the scheduler logger\n    self.schedulerLogging = self.api.config.tasks.schedulerLogging;\n\n    // create a new scheduler instance\n    self.scheduler = new NR.scheduler({connection: self.connectionDetails, timeout: self.api.config.tasks.timeout})\n\n    // define the handler for the on error event\n    self.scheduler.on('error', error => self.api.log(error, 'error', '[api.resque.scheduler]'))\n\n    // start the scheduler\n    self.scheduler.connect(() => {\n      // define some handlers to the scheduler events\n      self.scheduler.on('start', () => self.api.log('resque scheduler started', self.schedulerLogging.start))\n      self.scheduler.on('end', () => self.api.log('resque scheduler ended', self.schedulerLogging.end))\n      self.scheduler.on('poll', () => self.api.log('resque scheduler polling', self.schedulerLogging.poll))\n      self.scheduler.on('working_timestamp', timestamp => self.api.log(`resque scheduler working timestamp ${timestamp}`, self.schedulerLogging.working_timestamp))\n      self.scheduler.on('transferred_job', (timestamp, job) => self.api.log(`resque scheduler enqueuing job ${timestamp}`, self.schedulerLogging.transferred_job, job))\n\n      // start the scheduler\n      self.scheduler.start()\n\n      // execute the callback function\n      callback()\n    })\n  }\n\n  /**\n   * Stop scheduler.\n   *\n   * @param callback Callback function.\n   */\n  stopScheduler (callback) {\n    let self = this\n\n    // if the scheduler not exists execute the callback function and return\n    if (!self.scheduler) {\n      callback()\n      return\n    }\n\n    // finish the scheduler execution\n    self.scheduler.end(() => {\n      self.scheduler = null\n      callback()\n    })\n  }\n\n  /**\n   * Start multiworker system.\n   *\n   * @param callback\n   */\n  startMultiWorker (callback) {\n    let self = this\n\n    self.workerLogging = self.api.config.tasks.workerLogging\n    self.schedulerLogging = self.api.config.tasks.schedulerLogging\n\n    // create a new multiworker instance\n    self.multiWorker = new NR.multiWorker({\n      connection: self.connectionDetails,\n      queues: self.api.config.tasks.queues,\n      timeout: self.api.config.tasks.timeout,\n      checkTimeout: self.api.config.tasks.checkTimeout,\n      minTaskProcessors: self.api.config.tasks.minTaskProcessors,\n      maxTaskProcessors: self.api.config.tasks.maxTaskProcessors,\n      maxEventLoopDelay: self.api.config.tasks.maxEventLoopDelay,\n      toDisconnectProcessors: self.api.config.tasks.toDisconnectProcessors\n    }, self.api.tasks.jobs)\n\n    // normal worker emitters\n    self.multiWorker.on('start', workerId => self.api.log('worker: started', self.workerLogging.start, {workerId: workerId}))\n    self.multiWorker.on('end', workerId => self.api.log('worker: ended', self.workerLogging.end, {workerId: workerId}))\n    self.multiWorker.on('cleaning_worker', (workerId, worker, pid) => self.api.log(`worker: cleaning old worker ${worker}, (${pid})`, self.workerLogging.cleaning_worker))\n    // for debug: self.multiWorker.on('poll', (queue) => self.api.log(`worker: polling ${queue}`, self.workerLogging.poll))\n    self.multiWorker.on('job', (workerId, queue, job) => self.api.log(`worker: working job ${queue}`, self.workerLogging.job, {\n      workerId: workerId,\n      job: {class: job.class, queue: job.queue}\n    }))\n    self.multiWorker.on('reEnqueue', (workerId, queue, job, plugin) => self.api.log('worker: reEnqueue job', self.workerLogging.reEnqueue, {\n      workerId: workerId,\n      plugin: plugin,\n      job: {class: job.class, queue: job.queue}\n    }))\n    self.multiWorker.on('success', (workerId, queue, job, result) => self.api.log(`worker: job success ${queue}`, self.workerLogging.success, {\n      workerId: workerId,\n      job: {class: job.class, queue: job.queue},\n      result: result\n    }))\n    self.multiWorker.on('pause', workerId => self.api.log('worker: paused', self.workerLogging.pause, {workerId: workerId}))\n\n    self.multiWorker.on('failure', (workerId, queue, job, failure) => self.api.exceptionHandlers.task(failure, queue, job))\n    self.multiWorker.on('error', (workerId, queue, job, error) => self.api.exceptionHandlers.task(error, queue, job))\n\n    // multiWorker emitters\n    self.multiWorker.on('internalError', error => self.api.log(error, self.workerLogging.internalError))\n    // for debug: self.multiWorker.on('multiWorkerAction', (verb, delay) => self.api.log(`*** checked for worker status: ${verb} (event loop delay: ${delay}ms)`, self.workerLogging.multiWorkerAction))\n\n    if (self.api.config.tasks.minTaskProcessors > 0) {\n      self.multiWorker.start(() => {\n        if (typeof callback === 'function') { callback() }\n      })\n    } else {\n      if (typeof callback === 'function') { callback() }\n    }\n  }\n\n  /**\n   * Stop multiworker system.\n   *\n   * @param callback Callback function.\n   */\n  stopMultiWorker (callback) {\n    let self = this\n\n    if (self.api.config.tasks.minTaskProcessors > 0) {\n      self.multiWorker.stop(() => {\n        self.api.log('task workers stopped')\n        callback()\n      })\n    } else {\n      callback()\n    }\n  }\n}\n\n/**\n * Satellite to start the resque manager.\n */\nexport default class {\n\n  /**\n   * Satellite load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 600\n\n  /**\n   * Satellite start priority.\n   *\n   * @type {number}\n   */\n  startPriority = 200\n\n  /**\n   * Satellite stop priority.\n   *\n   * @type {number}\n   */\n  stopPriority = 100\n\n  /**\n   * Satellite load methods.\n   *\n   * @param api   API reference object.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    // put resque manager available to the entire platform\n    api.resque = new ResqueManager(api)\n\n    // finish the satellite load execution\n    next()\n  }\n\n  /**\n   * Satellite start function.\n   *\n   * @param api   API reference object.\n   * @param next  Callback function.\n   */\n  start (api, next) {\n    if (api.config.tasks.minTaskProcessors === 0 && api.config.tasks.maxTaskProcessors > 0) {\n      api.config.tasks.minTaskProcessors = 1\n    }\n\n    // start the queue, scheduler and multiworker systems\n    api.resque.startQueue(() => {\n      api.resque.startScheduler(() => {\n        api.resque.startMultiWorker(() => {\n          next()\n        })\n      })\n    })\n  }\n\n  /**\n   * Satellite stop function.\n   *\n   * @param api   API reference object.\n   * @param next  Callback function.\n   */\n  stop (api, next) {\n    api.resque.stopScheduler(() => {\n      api.resque.stopMultiWorker(() => {\n        api.resque.queue.end(() => {\n          next()\n        })\n      })\n    })\n  }\n\n}\n"],"sourceRoot":"/source/"}