{"version":3,"sources":["satellites/logger.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;SAIE,Y,GAAe,G;;;;;yBAET,G,EAAK,I,EAAM;AACf,UAAI,aAAa,EAAjB;;;AAGA,WAAK,IAAI,CAAT,IAAc,IAAI,MAAJ,CAAW,MAAX,CAAkB,UAAhC,EAA4C;AAC1C,YAAI,IAAI,IAAI,MAAJ,CAAW,MAAX,CAAkB,UAAlB,CAA8B,CAA9B,CAAR;;AAEA,YAAI,OAAO,CAAP,KAAa,UAAjB,EAA6B;AAC3B,qBAAW,IAAX,CAAgB,EAAE,GAAF,oBAAhB;AACD,SAFD,MAEO;AACL,qBAAW,IAAX,CAAgB,CAAhB;AACD;AACF;;;AAGD,UAAI,MAAJ,GAAa,IAAI,kBAAQ,MAAZ,CAAmB,EAAC,YAAY,UAAb,EAAnB,CAAb;;;AAGA,UAAI,IAAI,MAAJ,CAAW,MAAX,CAAkB,MAAtB,EAA8B;AAC5B,YAAI,MAAJ,CAAW,SAAX,CAAqB,IAAI,MAAJ,CAAW,MAAX,CAAkB,MAAvC;AACD,OAFD,MAEO;AACL,YAAI,MAAJ,CAAW,SAAX,CAAqB,kBAAQ,MAAR,CAAe,MAAf,CAAsB,MAA3C;AACD;;;AAGD,UAAI,IAAI,MAAJ,CAAW,MAAX,CAAkB,MAAtB,EAA8B;AAC5B,0BAAQ,SAAR,CAAkB,IAAI,MAAJ,CAAW,MAAX,CAAkB,MAApC;AACD;;;AAGD,UAAI,GAAJ,GAAU,UAAU,GAAV,EAA+B;AAAA,YAAhB,KAAgB,yDAAR,MAAQ;;AACvC,YAAI,OAAO,CAAE,KAAF,EAAS,GAAT,CAAX;;AAEA,aAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAtB;AACA,YAAI,MAAJ,CAAW,GAAX,CAAe,KAAf,CAAqB,IAAI,MAAzB,EAAiC,IAAjC;AACD,OALD;;AAOA,UAAI,YAAY,EAAhB;AACA,WAAK,IAAI,EAAT,IAAc,IAAI,MAAJ,CAAW,MAAzB,EAAiC;AAC/B,kBAAU,IAAV,CAAe,EAAf;AACD;;AAED,UAAI,GAAJ,CAAQ,0BAAR,EAAoC,QAApC;AACA,UAAI,GAAJ,CAAQ,0CAAR,EAAoD,OAApD,EAA6D,SAA7D;;AAEA;AACD","file":"satellites/logger.js","sourcesContent":["import winston from 'winston';\n\nexport default class {\n\n  loadPriority = 120\n\n  load (api, next) {\n    let transports = [];\n\n    // load all transports\n    for (let i in api.config.logger.transports) {\n      let t = api.config.logger.transports[ i ];\n\n      if (typeof t === 'function') {\n        transports.push(t(api, winston));\n      } else {\n        transports.push(t);\n      }\n    }\n\n    // create the logger instance\n    api.logger = new winston.Logger({transports: transports});\n\n    // define the log level\n    if (api.config.logger.levels) {\n      api.logger.setLevels(api.config.logger.levels);\n    } else {\n      api.logger.setLevels(winston.config.syslog.levels);\n    }\n\n    // define log colors\n    if (api.config.logger.colors) {\n      winston.addColors(api.config.logger.colors);\n    }\n\n    // define an helper function to log\n    api.log = function (msg, level = 'info') {\n      let args = [ level, msg ];\n\n      args.push.apply(args, Array.prototype.slice.call(arguments, 2));\n      api.logger.log.apply(api.logger, args);\n    };\n\n    let logLevels = [];\n    for (let i in api.logger.levels) {\n      logLevels.push(i);\n    }\n\n    api.log('*** starting Stellar ***', 'notice');\n    api.log('Logger loaded. Possible levels include: ', 'debug', logLevels);\n\n    next();\n  }\n\n}\n"],"sourceRoot":"/source/"}