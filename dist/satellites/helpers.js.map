{"version":3,"sources":["satellites/helpers.js"],"names":[],"mappings":"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","file":"satellites/helpers.js","sourcesContent":["import uuid from 'node-uuid'\nimport GenericServer from '../genericServer'\n\nclass TestServer extends GenericServer {\n\n  constructor (api, type, options, attributes) {\n    super(api, type, options, attributes)\n\n    this.on('connection', connection => {\n      connection.messages = []\n      connection.actionCallbacks = {}\n    })\n\n    this.on('actionComplete', data => {\n      data.response.messageCount = data.messageCount\n      data.response.serverInformation = {\n        serverName: api.config.general.serverName,\n        apiVersion: api.config.general.apiVersion\n      }\n\n      data.response.requesterInformation = {\n        id: data.connection.id,\n        remoteIP: data.connection.remoteIP,\n        receivedParams: {}\n      };\n\n      if (data.response.error) {\n        data.response.error = api.config.errors.serializers.servers.helper(data.response.error)\n      }\n\n      for (var k in data.params) { data.response.requesterInformation.receivedParams[ k ] = data.params[ k ] }\n\n      if (data.toRender === true) {\n        this.sendMessage(data.connection, data.response, data.messageCount)\n      }\n    })\n  }\n\n  start (next) {\n    this.api.log('loading the testServer', 'warning')\n    next()\n  }\n\n  stop (next) { next() }\n\n  sendMessage (connection, message, messageCount) {\n    process.nextTick(() => {\n      message.messageCount = messageCount\n      connection.messages.push(message)\n\n      if (typeof connection.actionCallbacks[ messageCount ] === 'function') {\n        connection.actionCallbacks[ messageCount ](message, connection)\n        delete connection.actionCallbacks[ messageCount ]\n      }\n    })\n  }\n\n  goodbye () {}\n\n}\n\nclass Helpers {\n\n  /**\n   * API reference object.\n   *\n   * @type {null}\n   */\n  api = null\n\n  /**\n   * Create a new instance of Helpers class.\n   *\n   * @param api\n   */\n  constructor (api) { this.api = api }\n\n  connection () {\n    let self = this\n    let id = uuid.v4()\n\n    self.api.servers.servers.testServer.buildConnection({\n      id: id,\n      rawConnection: {},\n      remoteAddress: 'testServer',\n      remotePort: 0\n    })\n\n    return self.api.connections.connections[ id ]\n  }\n\n  initialize (api, options, next) {\n    let type = 'testServer'\n    let attributes = {\n      canChat: true,\n      logConnections: false,\n      logExits: false,\n      sendWelcomeMessage: true,\n      verbs: api.connections.allowedVerbs\n    }\n\n    next(new TestServer(api, type, options, attributes))\n  }\n\n  /**\n   * Run an action.\n   *\n   * This creates a fake connection to process the action\n   * and return the result on the callback function.\n   *\n   * @param actionName  Action to be executed.\n   * @param input       Action parameters.\n   * @param next        Callback function.\n   */\n  runAction (actionName, input, next) {\n    let self = this\n    let connection\n\n    if (typeof input === 'function' && !next) {\n      next = input\n      input = {}\n    }\n\n    if (input.id && input.type === 'testServer') {\n      connection = input\n    } else {\n      connection = self.connection()\n      connection.params = input\n    }\n    connection.params.action = actionName\n\n    connection.messageCount++\n    if (typeof next === 'function') {\n      connection.actionCallbacks[ (connection.messageCount) ] = next\n    }\n\n    process.nextTick(() => {self.api.servers.servers.testServer.processAction(connection) })\n  }\n\n  /**\n   * Execute a task.\n   *\n   * @param taskName  Task to be executed.\n   * @param params    Task parameters.\n   * @param next      Callback function.\n   */\n  runTask (taskName, params, next) {\n    let self = this\n    self.api.tasks.tasks[ taskName ].run(self.api, params, next)\n  }\n}\n\nexport default class {\n\n  /**\n   * Satellite load priority.\n   *\n   * @type {number}\n   */\n  loadPriority = 800\n\n  /**\n   * Satellite start priority.\n   *\n   * @type {number}\n   */\n  startPriority = 800\n\n  /**\n   * Satellite loading function.\n   *\n   * @param api   API object reference.\n   * @param next  Callback function.\n   */\n  load (api, next) {\n    if (api.env === 'test') {\n      // put the helpers available to all platform\n      api.helpers = new Helpers(api)\n    }\n\n    // finish the satellite load\n    next()\n  }\n\n  /**\n   * Satellite starting function.\n   *\n   * @param api   API object reference.\n   * @param next  Callback function.\n   */\n  start (api, next) {\n    if (api.env === 'test') {\n      new api.helpers.initialize(api, {}, serverObject => {\n        api.servers.servers.testServer = serverObject\n        api.servers.servers.testServer.start(() => next())\n      })\n\n      return\n    }\n\n    // finish the satellite start\n    next()\n  }\n\n}\n"],"sourceRoot":"/source/"}