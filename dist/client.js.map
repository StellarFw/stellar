{"version":3,"sources":["client.js"],"names":[],"mappings":"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","file":"client.js","sourcesContent":["/**\n * Interface for WebSocket client interact with the server.\n *\n * @param opts    Connections parameters.\n * @param client  Client object (if exists).\n * @constructor\n */\nvar StellarClient = function (opts, client) {\n  var self = this;\n\n  self.callbacks = {};\n  self.id = null;\n  self.events = {};\n  self.rooms = [];\n  self.state = 'disconnected';\n\n  self.options = self.defaults() || {};\n\n  // override default options\n  for (var i in opts) {\n    self.options[ i ] = opts[ i ];\n  }\n\n  if (client) {\n    self.externalClient = true;\n    self.client = client;\n  }\n};\n\nif (typeof Primus === 'undefined') {\n  var util = require('util');\n  var EventEmitter = require('events').EventEmitter;\n  util.inherits(StellarClient, EventEmitter);\n} else {\n  StellarClient.prototype = new Primus.EventEmitter();\n}\n\nStellarClient.prototype.defaults = function () {\n  return '%%DEFAULTS%%';\n};\n\nStellarClient.prototype.connect = function (callback) {\n  var self = this;\n  self.messageCount = 0;\n\n  if (self.client && self.externalClient !== true) {\n    self.client.end();\n    self.client.removeAllListeners();\n    self.client = Primus.connect(self.options.url, self.options);\n  } else if (self.client !== null && self.externalClient === true) {\n    self.client.end();\n    self.client.open();\n  } else {\n    self.client = Primus.connect(self.options.url, self.options);\n  }\n\n  /// define client event handlers\n\n  // open\n  self.client.on('open', () => {\n    self.configure((details) => {\n      if (self.state !== 'connected') {\n        self.state = 'connected';\n        if (typeof  callback === 'function') {\n          callback(null, details);\n        }\n      }\n\n      self.emit('connected');\n    });\n  });\n\n  // error\n  self.client.on('error', (err) => {\n    self.emit('error', err);\n  });\n\n  // reconnect\n  self.client.on('reconnect', () => {\n    self.messageCount = 0;\n    self.emit('reconnect');\n  });\n\n  // reconnecting\n  self.client.on('reconnecting', () => {\n    self.emit('reconnecting');\n    self.state = 'reconnecting';\n    self.emit('disconnected');\n  });\n\n  // timeout\n  self.client.on('timeout', () => {\n    self.state = 'timeout';\n    self.emit('timeout');\n  });\n\n  // end\n  self.client.on('end', () => {\n    self.messageCount = 0;\n\n    if (self.state !== 'disconnected') {\n      self.state = 'disconnected';\n      self.emit('disconnected');\n    }\n  });\n\n  // data\n  self.client.on('data', (data) => {\n    self.handleMessage(data);\n  });\n\n};\n\nStellarClient.prototype.configure = function (callback) {\n  var self = this\n\n  self.rooms.forEach(room => { self.send({event: 'roomAdd', room: room}) })\n\n  self.detailsView(details => {\n    self.id = details.data.id\n    self.fingerprint = details.data.fingerprint\n    self.rooms = details.data.rooms\n    callback(details)\n  })\n}\n\n// --------------------------------------------------------------------------------------------------------- [Messaging]\n\n/**\n * Send a message.\n *\n * @param args\n * @param callback\n */\nStellarClient.prototype.send = function (args, callback) {\n  // primus will buffer messages when nor connected\n  var self = this;\n  self.messageCount++;\n\n  if (typeof callback == 'function') { self.callbacks[ self.messageCount ] = callback; }\n\n  self.client.write(args);\n};\n\n/**\n * Handle message.\n *\n * @param message\n */\nStellarClient.prototype.handleMessage = function (message) {\n  let self = this\n\n  self.emit('message', message)\n\n  if (message.context === 'response') {\n    if (typeof self.callbacks[ message.messageCount ] === 'function') {\n      self.callbacks[ message.messageCount ](message)\n    }\n\n    delete self.callbacks[ message.messageCount ]\n  } else if (message.context === 'user') {\n    self.emit('say', message);\n  } else if (message.context === 'alert') {\n    self.emit('alert', message);\n  } else if (message.welcome && message.context === 'api') {\n    self.welcomeMessage = message.welcome;\n    self.emit('welcome', message);\n  } else if (message.context === 'api') {\n    self.emit('api', message);\n  }\n};\n\n// ----------------------------------------------------------------------------------------------------------- [Actions]\n\n/**\n * Call an action.\n *\n * If this client instance are connected use WebSocket, otherwise use a normal\n * HTTP request. This makes possible call actions as soon as the web app is\n * loaded.\n *\n * @param action   Name of the action to be called.\n * @param params   Action parameters.\n * @param callback Function who will be called when we receive the response.\n */\nStellarClient.prototype.action = function (action, params = {}, callback) {\n  let self = this;\n\n  if (!callback && typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  // define params to be a Map if it is null\n  if (!params) { params = {}; }\n\n  // sets the parameter action, in case of the action call be done over HTTP.\n  params.action = action;\n\n  // if the client is connected the connection should be done by WebSocket\n  // otherwise we need to use HTTP\n  if (self.state !== 'connected') {\n    self._actionWeb(params, callback);\n  } else {\n    self._actionWebSocket(params, callback);\n  }\n};\n\n/**\n * Call a action using a normal HTTP connection.\n *\n * @param params    Call parameters.\n * @param callback  Function to be executed after the response be received.\n * @private\n */\nStellarClient.prototype._actionWeb = function (params, callback) {\n  let self = this;\n\n  // create a new XMLHttpRequest instance\n  let xmlhttp = new XMLHttpRequest();\n\n  // define the action to be executed at the end of the request\n  xmlhttp.onreadystatechange = function () {\n    let response;\n\n    // the response only are received if the readyState is equals to 4\n    if (xmlhttp.readyState === 4) {\n\n      // if the HTTP status code is equals to 200 make a JSON parser.\n      // in case of the request code be different of 200 we try make\n      // a JSON parser too, but it can fail so we catch the exception\n      // and we make our own error message\n      if (xmlhttp.status === 200) {\n        response = JSON.parse(xmlhttp.responseText);\n      } else {\n        try {\n          response = JSON.parse(xmlhttp.responseText);\n        } catch (e) {\n          response = {error: {statusText: xmlhttp.statusText, responseText: xmlhttp.responseText}};\n        }\n      }\n\n      // execute the callback function\n      callback(response);\n    }\n  };\n\n  // define the HTTP method to be used (by default we use POST)\n  let method = (params.httpMethod || 'POST').toUpperCase();\n\n  // define the URL to be called and append the action on the query params\n  let url = self.options.url + self.options.apiPath + '?action=' + params.action;\n\n  if (method === 'GET') {\n    for (let param in params) {\n      if (~[ 'action', 'httpMethod' ].indexOf(param)) { continue; }\n      url += `&${param}=${params[ param ]}`;\n    }\n  }\n\n  // open a new connection\n  xmlhttp.open(method, url, true);\n\n  // det the content type to JSON\n  xmlhttp.setRequestHeader('Content-Type', 'application/json');\n\n  // send the request\n  xmlhttp.send(JSON.stringify(params));\n};\n\n/**\n * Send an action call request by WebSocket.\n *\n * @param params    Call parameters.\n * @param callback  Function to be executed at the end do the request.\n * @private\n */\nStellarClient.prototype._actionWebSocket = function (params, callback) {\n  let self = this;\n  self.send({event: 'action', params: params}, callback);\n};\n\n// ---------------------------------------------------------------------------------------------------------- [Commands]\n\n/**\n * Send a message to a room.\n *\n * @param room      Room name.\n * @param message   Message to be sent.\n * @param callback  Function to be executed to receive the server response.\n */\nStellarClient.prototype.say = function (room, message, callback) {\n  this.send({event: 'say', room: room, message: message}, callback);\n};\n\n/**\n * Make a file request.\n *\n * @param file      File to be requested.\n * @param callback  Function to be executed to receive the server response.\n */\nStellarClient.prototype.file = function (file, callback) {\n  this.send({event: 'file', file: file}, callback);\n};\n\n/**\n * Request the details view.\n *\n * @param callback  Function to be executed when the server respond.\n */\nStellarClient.prototype.detailsView = function (callback) {\n  this.send({event: 'detailsView'}, callback);\n};\n\n/**\n * Request a room state.\n *\n * @param room      Room name.\n * @param callback  Function to be executed to receive the server response.\n */\nStellarClient.prototype.roomView = function (room, callback) {\n  let self = this;\n  self.send({event: 'roomView', room: room}, callback);\n};\n\n/**\n * Create a new room.\n *\n * @param room      Name for the room to be created.\n * @param callback  Function to be executed to receive the server response.\n */\nStellarClient.prototype.roomAdd = function (room, callback) {\n  let self = this\n\n  self.send({event: 'roomAdd', room: room}, data => {\n    self.configure(() => { if (typeof callback === 'function') { callback(data) } })\n  })\n}\n\n/**\n * Leave a room.\n *\n * @param room      Name the to leave.\n * @param callback  Function to be executed to receive the server response.\n */\nStellarClient.prototype.roomLeave = function (room, callback) {\n  let self = this\n\n  // get the position of the room on the client rooms list\n  let index = self.rooms.indexOf(room)\n\n  // remove the room from the client room list\n  if (index > -1) { self.rooms.splice(index, 1) }\n\n  // make a server request to remove the client from the room\n  self.send({event: 'roomLeave', room: room}, (data) => {\n    self.configure(() => { if (typeof callback === 'function') { callback(data) } })\n  })\n}\n\n/**\n * Disconnect client from the server.\n */\nStellarClient.prototype.disconnect = function () {\n  let self = this;\n\n  // change the connection state to disconnected\n  self.state = 'disconnected';\n\n  // finish the connection between the client and the server\n  self.client.end();\n\n  // emit the 'disconnected' event\n  self.emit('disconnected');\n};\n\nexports.StellarClient = StellarClient\n"],"sourceRoot":"/source/"}