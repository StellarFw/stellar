{"version":3,"sources":["genericServer.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;AAKA,IAAI,mBAAmB,SAAnB,gBAAmB,GAAY;AACjC,QAAM,IAAI,KAAJ,CAAU,8DAAV,CAAN;AACD,CAFD;;;;;;;IAQqB,a;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BnB,yBAAa,GAAb,EAAkB,IAAlB,EAAwB,OAAxB,EAAiC,UAAjC,EAA6C;AAAA;;AAAA;;;;AAI3C,UAAK,GAAL,GAAW,GAAX;AACA,UAAK,IAAL,GAAY,IAAZ;AACA,UAAK,OAAL,GAAe,OAAf;AACA,UAAK,UAAL,GAAkB,UAAlB;;;AAGA,SAAK,IAAI,GAAT,IAAgB,MAAK,OAArB,EAA8B;AAC5B,UAAI,MAAK,UAAL,CAAiB,GAAjB,MAA2B,IAA3B,IAAmC,MAAK,UAAL,CAAiB,GAAjB,MAA2B,SAAlE,EAA6E;AAC3E,cAAK,UAAL,CAAiB,GAAjB,IAAyB,MAAK,OAAL,CAAc,GAAd,CAAzB;AACD;AACF;AAd0C;AAe5C;;;;;;;;;;;;;;;;oCAOgB,I,EAAM;AACrB,UAAI,OAAO,IAAX;;AAEA,UAAI,UAAU;AACZ,cAAM,KAAK,IADC;AAEZ,YAAI,KAAK,EAFG;AAGZ,oBAAY,KAAK,UAHL;AAIZ,kBAAU,KAAK,aAJH;AAKZ,uBAAe,KAAK;AALR,OAAd;;;AASA,UAAI,KAAK,UAAL,CAAgB,OAAhB,KAA4B,IAAhC,EAAsC;AAAE,gBAAQ,OAAR,GAAkB,IAAlB;AAAwB;;;AAGhE,UAAI,KAAK,WAAT,EAAsB;AAAE,gBAAQ,WAAR,GAAsB,KAAK,WAA3B;AAAwC;;;AAGhE,UAAI,aAAa,IAAI,KAAK,GAAL,CAAS,UAAb,CAAwB,KAAK,GAA7B,EAAkC,OAAlC,CAAjB;;;AAGA,iBAAW,WAAX,GAAyB,mBAAW;AAAE,aAAK,WAAL,CAAiB,UAAjB,EAA6B,OAA7B;AAAuC,OAA7E;;;AAGA,iBAAW,QAAX,GAAsB,gBAAQ;AAC5B,mBAAW,MAAX,CAAkB,IAAlB,GAAyB,IAAzB;AACA,aAAK,WAAL,CAAiB,UAAjB;AACD,OAHD;;;AAMA,WAAK,IAAL,CAAU,YAAV,EAAwB,UAAxB;;;AAGA,UAAI,KAAK,UAAL,CAAgB,cAAhB,KAAmC,IAAvC,EAA6C;AAAE,aAAK,GAAL,CAAS,gBAAT,EAA2B,MAA3B,EAAmC,EAAC,IAAI,WAAW,QAAhB,EAAnC;AAA+D;;;AAG9G,UAAI,KAAK,UAAL,CAAgB,kBAAhB,KAAuC,IAA3C,EAAiD;AAC/C,mBAAW,WAAX,CAAuB,EAAC,SAAS,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB,cAAlC,EAAkD,SAAS,KAA3D,EAAvB;AACD;;AAED,UAAI,OAAO,KAAK,UAAL,CAAgB,kBAAvB,KAA8C,QAAlD,EAA4D;AAC1D,mBAAW,YAAM;AACf,cAAI;AACF,uBAAW,WAAX,CAAuB,EAAC,SAAS,KAAK,GAAL,CAAS,MAAT,CAAgB,OAAhB,CAAwB,cAAlC,EAAkD,SAAS,KAA3D,EAAvB;AACD,WAFD,CAEE,OAAO,CAAP,EAAU;AACV,iBAAK,GAAL,CAAS,GAAT,CAAa,KAAb,CAAmB,CAAnB;AACD;AACF,SAND,EAMG,KAAK,UAAL,CAAgB,kBANnB;AAOD;AACF;;;;;;;;;;kCAOc,U,EAAY;AACzB,UAAI,OAAO,IAAX;;;AAGA,UAAI,kBAAkB,IAAI,KAAK,GAAL,CAAS,eAAb,CAA6B,KAAK,GAAlC,EAAuC,UAAvC,EAAmD,gBAAQ;AAC/E,aAAK,IAAL,CAAU,gBAAV,EAA4B,IAA5B;AACD,OAFqB,CAAtB;;;AAKA,sBAAgB,aAAhB;AACD;;;;;;;;;;gCAOY,U,EAAY;AACvB,UAAI,OAAO,IAAX;;AAEA,WAAK,GAAL,CAAS,UAAT,CAAoB,GAApB,CAAwB,UAAxB,EAAoC,UAAC,UAAD,EAAa,KAAb,EAAoB,UAApB,EAAgC,IAAhC,EAAsC,MAAtC,EAA8C,YAA9C,EAA+D;AACjG,aAAK,QAAL,CAAc,UAAd,EAA0B,KAA1B,EAAiC,UAAjC,EAA6C,IAA7C,EAAmD,MAAnD,EAA2D,YAA3D;AACD,OAFD;AAGD;;;;;;;;;;;;kCASc;AACb,UAAI,eAAe,EAAnB;;AAEA,WAAK,IAAI,CAAT,IAAc,KAAK,GAAL,CAAS,WAAT,CAAqB,WAAnC,EAAgD;AAC9C,YAAI,aAAa,KAAK,GAAL,CAAS,WAAT,CAAqB,WAArB,CAAkC,CAAlC,CAAjB;AACA,YAAI,WAAW,IAAX,KAAoB,KAAK,IAA7B,EAAmC;AACjC,uBAAa,IAAb,CAAkB,UAAlB;AACD;AACF;;AAED,aAAO,YAAP;AACD;;;;;;;;;;;;wBASI,O,EAAS,Q,EAAU,I,EAAM;AAC5B,UAAI,OAAO,IAAX;AACA,WAAK,GAAL,CAAS,GAAT,eAAyB,KAAK,IAA9B,UAAuC,OAAvC,EAAkD,QAAlD,EAA4D,IAA5D;AACD;;;;;;;;0BAKM,I,EAAM;AAAE;AAAoB;;;;;;;;yBAK7B,I,EAAM;AAAE;AAAoB;;;;;;;;;;;gCAQrB,U,EAAY,O,EAAS;AAAE;AAAoB;;;;;;;;;;;4BAQ/C,U,EAAY,M,EAAQ;AAAE;AAAoB;;;;;;kBA7LhC,a","file":"genericServer.js","sourcesContent":["import {EventEmitter} from 'events'\n\n/**\n * This function is called when the method is not implemented.\n */\nlet methodNotDefined = function () {\n  throw new Error('The containing method should be defined for this server type')\n}\n\n/**\n * This is the prototypical generic server class that all other types\n * of servers inherit from.\n */\nexport default class GenericServer extends EventEmitter {\n\n  /**\n   * API object reference.\n   */\n  api\n\n  /**\n   * Connection type.\n   */\n  type\n\n  /**\n   * Connection options.\n   */\n  options\n\n  /**\n   * Connection attributes.\n   */\n  attributes\n\n  /**\n   * Constructor.\n   *\n   * @param api\n   * @param name\n   * @param options\n   * @param attributes\n   */\n  constructor (api, name, options, attributes) {\n    // call super class constructor\n    super()\n\n    this.api = api\n    this.type = name\n    this.options = options\n    this.attributes = attributes\n\n    // attributes can be overwritten by the options\n    for (let key in this.options) {\n      if (this.attributes[ key ] !== null && this.attributes[ key ] !== undefined) {\n        this.attributes[ key ] = this.options[ key ]\n      }\n    }\n  }\n\n  /**\n   * Build a new connection object.\n   *\n   * @param data Connection data.\n   */\n  buildConnection (data) {\n    let self = this\n\n    let details = {\n      type: self.type,\n      id: data.id,\n      remotePort: data.remotePort,\n      remoteIP: data.remoteAddress,\n      rawConnection: data.rawConnection\n    }\n\n    // if the server canChat enable the flag on the connection\n    if (self.attributes.canChat === true) { details.canChat = true }\n\n    // if the connection doesn't have a fingerprint already create one\n    if (data.fingerprint) { details.fingerprint = data.fingerprint }\n\n    // create a new connection instance\n    let connection = new self.api.connection(self.api, details)\n\n    // define sendMessage method\n    connection.sendMessage = message => { self.sendMessage(connection, message) }\n\n    // define sendFile method\n    connection.sendFile = path => {\n      connection.params.file = path\n      self.processFile(connection)\n    }\n\n    // emit the new connection object\n    self.emit('connection', connection)\n\n    // check if the lod for this type of connection is active\n    if (self.attributes.logConnections === true) { self.log('new connection', 'info', {to: connection.remoteIP}) }\n\n    // bidirectional connection can have a welcome message\n    if (self.attributes.sendWelcomeMessage === true) {\n      connection.sendMessage({welcome: self.api.config.general.welcomeMessage, context: 'api'})\n    }\n\n    if (typeof self.attributes.sendWelcomeMessage === 'number') {\n      setTimeout(() => {\n        try {\n          connection.sendMessage({welcome: self.api.config.general.welcomeMessage, context: 'api'})\n        } catch (e) {\n          self.api.log.error(e)\n        }\n      }, self.attributes.sendWelcomeMessage)\n    }\n  }\n\n  /**\n   * Process an action request.\n   *\n   * @param connection Connection object.\n   */\n  processAction (connection) {\n    let self = this\n\n    // create a new action processor instance for this request\n    let actionProcessor = new this.api.actionProcessor(self.api, connection, data => {\n      self.emit('actionComplete', data)\n    })\n\n    // process the request\n    actionProcessor.processAction()\n  }\n\n  /**\n   * Process a file request.\n   *\n   * @param connection Connection object.\n   */\n  processFile (connection) {\n    let self = this\n\n    self.api.staticFile.get(connection, (connection, error, fileStream, mime, length, lastModified) => {\n      self.sendFile(connection, error, fileStream, mime, length, lastModified)\n    })\n  }\n\n  /**\n   * Get all active connection of this server.\n   *\n   * This don't work in some type of servers.\n   *\n   * @returns {Array}\n   */\n  connections () {\n    let _connections = []\n\n    for (let i in this.api.connections.connections) {\n      let connection = this.api.connections.connections[ i ]\n      if (connection.type === this.type) {\n        _connections.push(connection)\n      }\n    }\n\n    return _connections\n  }\n\n  /**\n   * Log function.\n   *\n   * @param message   Message to be logged.\n   * @param severity  Severity level.\n   * @param data      Additional data to be printed out.\n   */\n  log (message, severity, data) {\n    let self = this\n    self.api.log(`[Server: ${this.type}] ${message}`, severity, data)\n  }\n\n  /**\n   * Invoked as part of boot.\n   */\n  start (next) { methodNotDefined() }\n\n  /**\n   * Invoked as part of shutdown.\n   */\n  stop (next) { methodNotDefined() }\n\n  /**\n   * This method will be appended to the connection as 'connection.sendMessage'\n   *\n   * @param connection  Connection object.\n   * @param message     Message be sent back to the client.\n   */\n  sendMessage (connection, message) { methodNotDefined() }\n\n  /**\n   * This method will be used to gracefully disconnect the client.\n   *\n   * @param connection  Connection object.\n   * @param reason      Reason for disconnection.\n   */\n  goodbye (connection, reason) { methodNotDefined() }\n\n}\n"],"sourceRoot":"/source/"}