{"version":3,"sources":["config/api.js"],"names":[],"mappings":";;;;;;;;kBAGe;;AAEb,WAAS,sBAAO;AACd,WAAO;;;;AAIL,kBAAY,OAJP;;;;;AASL,kBAAY,aATP;;;;;;;;AAiBL,mBAAa,WAjBR;;;;;AAsBL,sBAAgB,iCAtBX;;;;;AA2BL,mBAAa,eA3BR;;;;;AAgCL,kBAAY,cAhCP;;;;;AAqCL,oBAAc,OAAO,EArChB,E;;;;;AA0CL,uBAAiB,IA1CZ;;;;;;AAgDL,2BAAqB,CAhDhB;;;;;;;AAuDL,mCAA6B,IAvDxB;;;;;AA4DL,sBAAgB,EA5DX;;;;;AAiEL,0BAAoB,CAAE,IAAF,EAAQ,EAAR,EAAY,SAAZ,CAjEf;;;;;AAsEL,eAAS,SAtEJ;;;;;AA2EL,kBAAY,IA3EP;;;;;AAgFL,iCAA2B,GAhFtB;;;;;AAqFL,+BAAyB,GArFpB;;;;;AA0FL,yBAAmB,YA1Fd;;;;;AA+FL,aAAO;AACL,kBAAU,IAAI,KAAJ,CAAU,QAAV,GAAqB,SAD1B;AAEL,gBAAQ,IAAI,KAAJ,CAAU,QAAV,GAAqB,OAFxB;AAGL,eAAO,IAAI,KAAJ,CAAU,QAAV,GAAqB,YAHvB;AAIL,eAAO,IAAI,KAAJ,CAAU,QAAV,GAAqB;AAJvB,OA/FF;;;;;;;;;;;AA+GL,yBAAmB;AACjB,uBAAe;AADE,OA/Gd;;;;;;AAuHL,2BAAqB,IAvHhB;;;;;;;;;AAgIL,6BAAuB,IAhIlB;;;;;AAqIL,YAAM,IArID;;;;;AA0IL,kBAAY,EA1IP;;;;;AA+IL,kBAAY;AA/IP,KAAP;AAiJD;;AApJY,C;;;;;;;;AA6JR,IAAM,sBAAO;AAClB,WAAS,sBAAO;AACd,WAAO;AACL,UAAI,aADC;AAEL,uBAAiB,IAFZ;AAGL,yBAAmB;AACjB,qBAAa,EADI;AAEjB,mBAAW;AAFM,OAHd;AAOL,6BAAuB;AAPlB,KAAP;AASD;AAXiB,CAAb;;;;;;;AAmBA,IAAM,kCAAa;AACxB,WAAS,sBAAO;AACd,WAAO;AACL,uBAAiB;AADZ,KAAP;AAGD;AALuB,CAAnB","file":"config/api.js","sourcesContent":["/**\n * General configs.\n */\nexport default {\n\n  general: api => {\n    return {\n      // ---------------------------------------------------------------------\n      // API version\n      // ---------------------------------------------------------------------\n      apiVersion: '0.0.1',\n\n      // ---------------------------------------------------------------------\n      // Server name\n      // ---------------------------------------------------------------------\n      serverName: 'Stellar API',\n\n      // ---------------------------------------------------------------------\n      // A unique token to the application that servers will use to\n      // authenticate to each other\n      //\n      // If this is not present an id will be generated dynamically.\n      // ---------------------------------------------------------------------\n      serverToken: 'change-me',\n\n      // ---------------------------------------------------------------------\n      // Welcome message seen by TCP and WebSocket clients upon connection\n      // ---------------------------------------------------------------------\n      welcomeMessage: 'Hello human! Welcome to Stellar',\n\n      // ---------------------------------------------------------------------\n      // The Redis prefix for Stellar's cache objects\n      // ---------------------------------------------------------------------\n      cachePrefix: 'stellar:cache',\n\n      // ---------------------------------------------------------------------\n      // The Redis prefix for Stellar's cache/lock objects\n      // ---------------------------------------------------------------------\n      lockPrefix: 'stellar:lock',\n\n      // ---------------------------------------------------------------------\n      // How long will a lock last before it expires (ms)\n      // ---------------------------------------------------------------------\n      lockDuration: 1000 * 10, // 10 seconds\n\n      // ---------------------------------------------------------------------\n      // By default the Stellar are in development mode\n      // ---------------------------------------------------------------------\n      developmentMode: true,\n\n      // ---------------------------------------------------------------------\n      // Number of action who can be executed simultaneous by a single\n      // connection.\n      // ---------------------------------------------------------------------\n      simultaneousActions: 5,\n\n      // ---------------------------------------------------------------------\n      // Allow connection to be created without remoteIP and remotePort\n      //\n      // They will be set to 0\n      // ---------------------------------------------------------------------\n      enforceConnectionProperties: true,\n\n      // ---------------------------------------------------------------------\n      // Params you would like hidden from any logs\n      // ---------------------------------------------------------------------\n      filteredParams: [],\n\n      // ---------------------------------------------------------------------\n      // Values that signify missing params\n      // ---------------------------------------------------------------------\n      missingParamChecks: [ null, '', undefined ],\n\n      // ---------------------------------------------------------------------\n      // Which channel to use on redis pub/sub for RPC communication\n      // ---------------------------------------------------------------------\n      channel: 'stellar',\n\n      // ---------------------------------------------------------------------\n      // How long to wait for an RPC call before considering it a failure\n      // ---------------------------------------------------------------------\n      rpcTimeout: 5000,\n\n      // ---------------------------------------------------------------------\n      // The default priority level given to middleware of all types\n      // ---------------------------------------------------------------------\n      defaultMiddlewarePriority: 100,\n\n      // ---------------------------------------------------------------------\n      // Default priority level given to listeners\n      // ---------------------------------------------------------------------\n      defaultListenerPriority: 100,\n\n      // ---------------------------------------------------------------------\n      // Default filetype to serve when a user requests a directory\n      // ---------------------------------------------------------------------\n      directoryFileType: 'index.html',\n\n      // ---------------------------------------------------------------------\n      // Configurations for Stellar project structure\n      // ---------------------------------------------------------------------\n      paths: {\n        'public': api.scope.rootPath + '/public',\n        'temp': api.scope.rootPath + '/temp',\n        'pid': api.scope.rootPath + '/temp/pids',\n        'log': api.scope.rootPath + '/temp/logs'\n      },\n\n      // ---------------------------------------------------------------------\n      // Hash containing chat rooms to be created at server boot\n      //\n      // Format:\n      //  {roomName: {authKey, authValue}}\n      //\n      // Example:\n      //  'secureRoom': {authorized: true}\n      // ---------------------------------------------------------------------\n      startingChatRooms: {\n        'defaultRoom': {}\n      },\n\n      // ---------------------------------------------------------------------\n      // This activates some system actions, these allow obtain the status of\n      // the server.\n      // ---------------------------------------------------------------------\n      enableSystemActions: true,\n\n      // ---------------------------------------------------------------------\n      // Documentation\n      //\n      // If active the Stellar will generate documentation , on the startup,\n      // for all loaded actions. This will be accessible from\n      // `:serverAddress/docs`.\n      // ---------------------------------------------------------------------\n      generateDocumentation: true,\n\n      // ---------------------------------------------------------------------\n      // Predefined salt to use in the hash functions\n      // ---------------------------------------------------------------------\n      salt: null,\n\n      // ---------------------------------------------------------------------\n      // Predefined salt length to use in the salt generation\n      // ---------------------------------------------------------------------\n      saltLength: 10,\n\n      // ---------------------------------------------------------------------\n      // Number of round to use on the salt generation\n      // ---------------------------------------------------------------------\n      saltRounds: 10,\n    }\n  }\n\n}\n\n/**\n * Test configs.\n *\n * @type {{}}\n */\nexport const test = {\n  general: api => {\n    return {\n      id: 'test-server',\n      developmentMode: true,\n      startingChatRooms: {\n        defaultRoom: {},\n        otherRoom: {}\n      },\n      generateDocumentation: false\n    }\n  }\n}\n\n/**\n * Production configs.\n *\n * @type {{}}\n */\nexport const production = {\n  general: api => {\n    return {\n      developmentMode: false\n    }\n  }\n}\n"],"sourceRoot":"/source/"}