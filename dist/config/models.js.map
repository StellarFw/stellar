{"version":3,"sources":["config/models.js"],"names":[],"mappings":";;;;;;;;kBAGe;AACb,UAAQ,gBAAC,GAAD,EAAS;AACf,WAAO;;;;AAIL,wBAAkB,oCAJb;;;;;;;;;;;AAeL,WAAK;AAfA,KAAP;AAiBD;AAnBY,C;;;;;;;;AA2BR,IAAM,sBAAO;AAClB,UAAQ,gBAAC,GAAD,EAAS;;AAEf,QAAI,MAAM,WAAV;;;;AAIA,QAAI,QAAQ,GAAR,CAAY,SAAZ,KAA0B,OAA9B,EAAuC;AACrC,YAAM,UAAN;AACD;;AAED,WAAO;AACL,WAAK;AADA,KAAP;AAGD;AAdiB,CAAb","file":"config/models.js","sourcesContent":["/**\n * Models configs.\n */\nexport default {\n  models: (api) => {\n    return {\n      // ---------------------------------------------------------------------\n      // Connection string for the MongoDB server\n      // ---------------------------------------------------------------------\n      connectionString: 'mongodb://localhost/ConnectionTest',\n\n      // ---------------------------------------------------------------------\n      // Which MongoDB package should we use?\n      //\n      // Valid Values:\n      //  - mockgoose: Used for dev or test servers. This shouldn't be used on\n      //    a production server, every time the server is shutdown all\n      //    information is lost.\n      //  - mongoose: Used for production server.\n      // ---------------------------------------------------------------------\n      pkg: 'mockgoose'\n    }\n  }\n}\n\n/**\n * Models configs for test environment.\n *\n * @type {{models: (function())}}\n */\nexport const test = {\n  models: (api) => {\n    // by default we use mockgoose\n    let pkg = 'mockgoose'\n\n    // if the environment have a MOCKGOOSE var set to false we use mongoose instead\n    // of mockgoose\n    if (process.env.MOCKGOOSE === 'false') {\n      pkg = 'mongoose'\n    }\n\n    return {\n      pkg: pkg\n    }\n  }\n}\n"],"sourceRoot":"/source/"}