{"version":3,"sources":["config/errors.js"],"names":[],"mappings":"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","file":"config/errors.js","sourcesContent":["import Utils from '../utils'\n\nexport default {\n  errors: api => {\n    return {\n      '_toExpand': false,\n\n      // ---------------------------------------------------------------------\n      // [SERIALIZERS]\n      // ---------------------------------------------------------------------\n\n      serializers: {\n        servers: {\n          web: error => {\n            if (Utils.isError(error)) {\n              return String(error.message)\n            } else {\n              return error\n            }\n          },\n          websocket: error => {\n            if (Utils.isError(error)) {\n              return String(error.message)\n            } else {\n              return error\n            }\n          },\n          tcp: error => {\n            if (Utils.isError(error)) {\n              return String(error.message)\n            } else {\n              return error\n            }\n          },\n          helper: error => {\n            if (Utils.isError(error)) {\n              return 'Error: ' + String(error.message)\n            } else {\n              return error\n            }\n          }\n        }\n      },\n\n      // ---------------------------------------------------------------------\n      // [GENERAL ERRORS]\n      // ---------------------------------------------------------------------\n\n      // ---------------------------------------------------------------------\n      // The message to accompany general 500 errors (internal server errors)\n      // ---------------------------------------------------------------------\n      serverErrorMessage: () => 'The server experienced an internal error',\n\n      // ---------------------------------------------------------------------\n      // When a client make a call to a private action\n      // ---------------------------------------------------------------------\n      privateActionCalled: actionName => `the action '${actionName}' is private`,\n\n      // ---------------------------------------------------------------------\n      // When a params for an action is invalid\n      // ---------------------------------------------------------------------\n      invalidParams: params => params.join(', '),\n\n      // ---------------------------------------------------------------------\n      // When a required param for an action is not provided\n      // ---------------------------------------------------------------------\n      missingParams: params => `${params[ 0 ]} is a required parameter for this action`,\n\n      // ---------------------------------------------------------------------\n      // When a param was an invalid type\n      // ---------------------------------------------------------------------\n      paramInvalidType: (paramName, expected) => `param '${paramName}' has an invalid type, expected ${expected}`,\n\n      // ---------------------------------------------------------------------\n      // user required an unknown action\n      // ---------------------------------------------------------------------\n      unknownAction: action => 'unknown action or invalid apiVersion',\n\n      // ---------------------------------------------------------------------\n      // action can be called by this client/server type\n      // ---------------------------------------------------------------------\n      unsupportedServerType: type => `this action does not support the ${type} connection type`,\n\n      // ---------------------------------------------------------------------\n      // Action failed because server is mid-shutdown\n      // ---------------------------------------------------------------------\n      serverShuttingDown: () => 'the server is shutting down',\n\n      // ---------------------------------------------------------------------\n      // action failed because this client already has too many pending\n      // actions\n      //\n      // the limit is defined in api.config.general.simultaneousActions\n      // ---------------------------------------------------------------------\n      tooManyPendingActions: () => 'you have too many pending requests',\n\n      // ---------------------------------------------------------------------\n      // data length is too big\n      //\n      // the limit can be configured using:\n      //  api.config.servers.tcp.maxDataLength\n      // ---------------------------------------------------------------------\n      dataLengthTooLarge: (maxLength, receivedLength) => {\n        return api.i18n.localize(`data length is too big (${maxLength} received/${receivedLength} max)`)\n      },\n\n      // ---------------------------------------------------------------------\n      // a poorly designed action cloud try to call next() more than once\n      // ---------------------------------------------------------------------\n      doubleCallbackError: () => 'Double callback prevented within action',\n\n      // ---------------------------------------------------------------------\n      // function to be executed when a file to exists\n      // ---------------------------------------------------------------------\n      fileNotFound: () => 'The requested file not exists',\n\n      // ---------------------------------------------------------------------\n      // function to be executed when occurs a error during file reading\n      // ---------------------------------------------------------------------\n      fileReadError: (connection, error) => connection.localize(`error reading file: ${String(error)}`),\n\n      // ---------------------------------------------------------------------\n      // User didn't request a file\n      // ---------------------------------------------------------------------\n      fileNotProvided: () => 'File is a required param to send a file',\n\n      // ---------------------------------------------------------------------\n      // Connections\n      // ---------------------------------------------------------------------\n\n      // ---------------------------------------------------------------------\n      // Function to be executed when a verb is'nt found\n      // ---------------------------------------------------------------------\n      verbNotFound: (connection, verb) => connection.localize(`the verb non't exists (${verb})`),\n\n      // ---------------------------------------------------------------------\n      // Function to be executed when a verb isn't not allowed\n      // ---------------------------------------------------------------------\n      verbNotAllowed: (connection, verb) => connection.localize(`verb not found or not allowed (${verb})`),\n\n      // ---------------------------------------------------------------------\n      // Error handler when the room and the message are not present on the\n      // request.\n      // ---------------------------------------------------------------------\n      connectionRoomAndMessage: connection => connection.localize('both room and message are required'),\n\n      // ---------------------------------------------------------------------\n      // Error handle for a request made to a room who the user as not part of\n      // ---------------------------------------------------------------------\n      connectionNotInRoom: (connection, room) => connection.localize(`connection not in this room (${room})`),\n\n      // ---------------------------------------------------------------------\n      // Error handler for a join request to a room which the user is already\n      // part\n      // ---------------------------------------------------------------------\n      connectionAlreadyInRoom: (connection, room) => connection.localize(`connection already in this room (${room})`),\n\n      // ---------------------------------------------------------------------\n      // Error handle request for a deleted room.\n      // ---------------------------------------------------------------------\n      connectionRoomHasBeenDeleted: room => 'this room has been deleted',\n\n      // ---------------------------------------------------------------------\n      // Error handler for a join request to a not existing room\n      // ---------------------------------------------------------------------\n      connectionRoomNotExist: room => 'room does not exist',\n\n      // ---------------------------------------------------------------------\n      // Error handler for a room creation request with a same name a already\n      // existing room\n      // ---------------------------------------------------------------------\n      connectionRoomExists: room => 'room exists',\n\n      // ---------------------------------------------------------------------\n      // Error handler for a request who need a room name and that parameter\n      // are not present.\n      // ---------------------------------------------------------------------\n      connectionRoomRequired: room => 'a room is required'\n    }\n  }\n}\n"],"sourceRoot":"/source/"}