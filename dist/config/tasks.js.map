{"version":3,"sources":["config/tasks.js"],"names":[],"mappings":";;;;;;;;kBAGe;AACb,SAAO,oBAAO;AACZ,WAAO;;;;AAIL,iBAAW,KAJN;;;;;AASL,cAAQ,CAAE,GAAF,CATH;;;;;AAcL,qBAAe;AACb,iBAAS,OADI,E;AAEb,iBAAS,MAFI,E;AAGb,eAAO,MAHM;AAIb,aAAK,MAJQ;AAKb,yBAAiB,MALJ;AAMb,cAAM,OANO;AAOb,aAAK,OAPQ;AAQb,eAAO,OARM;AASb,uBAAe,OATF;AAUb,2BAAmB;AAVN,OAdV;;;;;AA8BL,wBAAkB;AAChB,eAAO,MADS;AAEhB,aAAK,MAFW;AAGhB,cAAM,OAHU;AAIhB,iBAAS,OAJO;AAKhB,mBAAW,OALK;AAMhB,2BAAmB,OANH;AAOhB,yBAAiB;AAPD,OA9Bb;;;;;AA2CL,eAAS,IA3CJ;;;;;;AAiDL,yBAAmB,CAjDd;;;;;AAsDL,yBAAmB,CAtDd;;;;;AA2DL,oBAAc,GA3DT;;;;;;AAiEL,yBAAmB,CAjEd;;;;;;AAuEL,8BAAwB,IAvEnB;;;;;AA4EL,aAAO,IAAI,MAAJ,CAAW;AA5Eb,KAAP;AA8ED;AAhFY,C;;;;;;;;AAwFR,IAAI,sBAAO;AAChB,SAAO,oBAAO;AACZ,WAAO;AACL,eAAS,GADJ;AAEL,oBAAc,EAFT;AAGL,iBAAW,IAHN;AAIL,aAAO,IAAI,MAAJ,CAAW;AAJb,KAAP;AAMD;AARe,CAAX","file":"config/tasks.js","sourcesContent":["/**\n * Default task configs.\n */\nexport default {\n  tasks: api => {\n    return {\n      // ---------------------------------------------------------------------\n      // should this mode run a scheduler to promote delayed tasks?\n      // ---------------------------------------------------------------------\n      scheduler: false,\n\n      // ---------------------------------------------------------------------\n      // what queues should the taskProcessors work?\n      // ---------------------------------------------------------------------\n      queues: [ '*' ],\n\n      // ---------------------------------------------------------------------\n      // logging levels of tasks workers\n      // ---------------------------------------------------------------------\n      workerLogging: {\n        failure: 'error', // task failure\n        success: 'info',  // task success\n        start: 'info',\n        end: 'info',\n        cleaning_worker: 'info',\n        poll: 'debug',\n        job: 'debug',\n        pause: 'debug',\n        internalError: 'error',\n        multiWorkerAction: 'debug'\n      },\n\n      // ---------------------------------------------------------------------\n      // logging levels of the task scheduler\n      // ---------------------------------------------------------------------\n      schedulerLogging: {\n        start: 'info',\n        end: 'info',\n        poll: 'debug',\n        enqueue: 'debug',\n        reEnqueue: 'debug',\n        working_timestamp: 'debug',\n        transferred_job: 'debug'\n      },\n\n      // ---------------------------------------------------------------------\n      // how long to sleep between jobs / scheduler checks\n      // ---------------------------------------------------------------------\n      timeout: 5000,\n\n      // ---------------------------------------------------------------------\n      // at minimum, how many parallel taskProcessors should this node spawn?\n      // (have number > 0 to enable, and < 1 to disable)\n      // ---------------------------------------------------------------------\n      minTaskProcessors: 0,\n\n      // ---------------------------------------------------------------------\n      // at maximum, how many parallel taskProcessors should this node spawn?\n      // ---------------------------------------------------------------------\n      maxTaskProcessors: 0,\n\n      // ---------------------------------------------------------------------\n      // how often should we check the event loop to spawn more taskProcessors?\n      // ---------------------------------------------------------------------\n      checkTimeout: 500,\n\n      // ---------------------------------------------------------------------\n      // how many ms would constitute an event loop delay to halt\n      // taskProcessors spawning?\n      // ---------------------------------------------------------------------\n      maxEventLoopDelay: 5,\n\n      // ---------------------------------------------------------------------\n      // When we kill off a taskProcessor, should we disconnect that local\n      // redis connection?\n      // ---------------------------------------------------------------------\n      toDisconnectProcessors: true,\n\n      // ---------------------------------------------------------------------\n      // What redis server should we connect to for tasks / delayed jobs?\n      // ---------------------------------------------------------------------\n      redis: api.config.redis\n    }\n  }\n}\n\n/**\n * Tasks configs for test environment.\n *\n * @type {{tasks: (function())}}\n */\nexport let test = {\n  tasks: api => {\n    return {\n      timeout: 100,\n      checkTimeout: 50,\n      scheduler: true,\n      redis: api.config.redis\n    }\n  }\n}\n"],"sourceRoot":"/source/"}