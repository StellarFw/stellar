{"version":3,"sources":["config/redis.js"],"names":[],"mappings":";;;;;;AACA,IAAI,OAAO,QAAQ,GAAR,CAAY,UAAZ,IAA0B,WAArC;AACA,IAAI,OAAO,QAAQ,GAAR,CAAY,UAAZ,IAA0B,IAArC;AACA,IAAI,KAAK,QAAQ,GAAR,CAAY,QAAZ,IAAwB,CAAjC;AACA,IAAI,WAAW,QAAQ,GAAR,CAAY,UAAZ,IAA0B,IAAzC;;;;;;;;;kBASe;AACb,SAAO,oBAAO;;AAEZ,QAAI,QAAQ,GAAR,CAAY,SAAZ,KAA0B,OAA1B,IAAqC,QAAQ,GAAR,CAAY,UAAZ,KAA2B,SAApE,EAA+E;;AAE7E,aAAO;AACL,qBAAa,KADR;;AAGL,gBAAQ;AACN,uBAAa,QAAQ,SAAR,CADP;AAEN,gBAAM,CAAE,EAAC,MAAM,IAAP,EAAa,MAAM,IAAnB,EAAyB,UAAU,QAAnC,EAA6C,IAAI,EAAjD,EAAF,CAFA;AAGN,oBAAU;AAHJ,SAHH;AAQL,oBAAY;AACV,uBAAa,QAAQ,SAAR,CADH;AAEV,gBAAM,CAAE,EAAC,MAAM,IAAP,EAAa,MAAM,IAAnB,EAAyB,UAAU,QAAnC,EAA6C,IAAI,EAAjD,EAAF,CAFI;AAGV,oBAAU;AAHA,SARP;AAaL,eAAO;AACL,uBAAa,QAAQ,SAAR,CADR;AAEL,gBAAM,CAAE,EAAC,MAAM,IAAP,EAAa,MAAM,IAAnB,EAAyB,UAAU,QAAnC,EAA6C,IAAI,EAAjD,EAAF,CAFD;AAGL,oBAAU;AAHL;AAbF,OAAP;AAoBD,KAtBD,MAsBO;;AAEL,aAAO;AACL,qBAAa,KADR;;AAGL,gBAAQ;AACN,uBAAa,QAAQ,WAAR,EAAqB,YAD5B;AAEN,gBAAM,CAAE,IAAF,EAAQ,IAAR,EAAc,EAAC,MAAM,IAAP,EAAd,CAFA;AAGN,oBAAU;AAHJ,SAHH;AAQL,oBAAY;AACV,uBAAa,QAAQ,WAAR,EAAqB,YADxB;AAEV,gBAAM,CAAE,IAAF,EAAQ,IAAR,EAAc,EAAC,MAAM,IAAP,EAAd,CAFI;AAGV,oBAAU;AAHA,SARP;AAaL,eAAO;AACL,uBAAa,QAAQ,WAAR,EAAqB,YAD7B;AAEL,gBAAM,CAAE,IAAF,EAAQ,IAAR,EAAc,EAAC,MAAM,IAAP,EAAd,CAFD;AAGL,oBAAU;AAHL;AAbF,OAAP;AAoBD;AACF;AAhDY,C","file":"config/redis.js","sourcesContent":["// get parameters from the environment or use defaults\nlet host = process.env.REDIS_HOST || '127.0.0.1'\nlet port = process.env.REDIS_PORT || 6379\nlet db = process.env.REDIS_DB || 0\nlet password = process.env.REDIS_PASS || null\n\n/**\n * Redis configs.\n *\n * constructor  - the redis client constructor method (package)\n * args         - the arguments to pass to the constructor\n * buildNew     - is to use the `new` keyword on the the constructor?\n */\nexport default {\n  redis: api => {\n\n    if (process.env.FAKEREDIS === 'false' || process.env.REDIS_HOST !== undefined) {\n\n      return {\n        '_toExpand': false,\n\n        client: {\n          constructor: require('ioredis'),\n          args: [ {port: port, host: host, password: password, db: db} ],\n          buildNew: true\n        },\n        subscriber: {\n          constructor: require('ioredis'),\n          args: [ {port: port, host: host, password: password, db: db} ],\n          buildNew: true\n        },\n        tasks: {\n          constructor: require('ioredis'),\n          args: [ {port: port, host: host, password: password, db: db} ],\n          buildNew: true\n        }\n      }\n\n    } else {\n\n      return {\n        '_toExpand': false,\n\n        client: {\n          constructor: require('fakeredis').createClient,\n          args: [ port, host, {fast: true} ],\n          buildNew: false\n        },\n        subscriber: {\n          constructor: require('fakeredis').createClient,\n          args: [ port, host, {fast: true} ],\n          buildNew: false\n        },\n        tasks: {\n          constructor: require('fakeredis').createClient,\n          args: [ port, host, {fast: true} ],\n          buildNew: false\n        }\n      }\n\n    }\n  }\n}\n"],"sourceRoot":"/source/"}