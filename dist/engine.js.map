{"version":3,"sources":["engine.js"],"names":[],"mappings":"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","file":"engine.js","sourcesContent":["// Enable source map support\nimport 'source-map-support/register'\n\n// Module Dependencies\nimport _ from 'lodash'\nimport path from 'path'\nimport async from 'async'\nimport Utils from './utils'\n\n/**\n * Main Stellar entry point class.\n *\n * This makes the system bootstrap, loading and execution all\n * satellites. Each initializer load new features to the\n * engine instance or perform a set of instruction to accomplish\n * a certain goal.\n */\nexport default class Engine {\n\n  // ---------------------------------------------------------------------------------------------------------- [STATIC]\n\n  /**\n   * Default proprieties for the satellites.\n   *\n   * @type {{load: number, start: number, stop: number}}\n   */\n  static defaultPriorities = {\n    load: 100,\n    start: 100,\n    stop: 100\n  }\n\n  /**\n   * Normalize satellite priorities.\n   *\n   * @param satellite Satellite instance to be normalized.\n   */\n  static normalizeInitializerPriority (satellite) {\n    satellite.loadPriority = satellite.loadPriority || Engine.defaultPriorities.load\n    satellite.startPriority = satellite.startPriority || Engine.defaultPriorities.start\n    satellite.stopPriority = satellite.stopPriority || Engine.defaultPriorities.stop\n  }\n\n  /**\n   * Order satellites array by their priority.\n   *\n   * @param collection  Satellites array to be ordered.\n   * @returns {Array}   New ordered array.\n   */\n  static flattenOrderedInitializer (collection) {\n    let keys = []\n    let output = []\n\n    // get keys from the collection\n    for (var key in collection) { keys.push(parseInt(key)) }\n\n    // sort the keys in ascendant way\n    keys.sort((a, b) => a - b)\n\n    // iterate the ordered keys and create the new ordered object to be outputted\n    keys.forEach(key => collection[ key ].forEach(d => output.push(d)))\n\n    // return the new ordered object\n    return output\n  }\n\n  /**\n   * Print fatal error on the console and exit from the engine\n   * execution.\n   *\n   * @private\n   * @param api     API instance.\n   * @param errors  String or array with the fatal error(s).\n   * @param type    String with the error type.\n   */\n  static fatalError (api, errors, type) {\n    // if errors variables if not defined return\n    if (!errors) { return }\n\n    // ensure the errors variable is an instance of Array\n    if (!(errors instanceof Array)) { errors = [ errors ] }\n\n    // log an emergency message\n    api.log(`Error with satellite step: ${type}`, 'emergency')\n\n    // log all the errors\n    errors.forEach(err => api.log(err.stack, 'emergency'))\n\n    // finish the process execution\n    process.exit(1)\n  }\n\n  // ----------------------------------------------------------------------------------------------------------- [Class]\n\n  /**\n   * API object.\n   *\n   * This object will be shared across all the platform, it's here the\n   * satellites will load logic and the developers access the functions.\n   *\n   * @type {{}}\n   */\n  api = {\n    initialized: false,\n    shuttingDown: false,\n    running: false,\n    started: false,\n    bootTime: null,\n\n    commands: {\n      start: null,\n      stop: null,\n      restart: null\n    },\n\n    _self: null,\n\n    log: null,\n\n    scope: {}\n  }\n\n  /**\n   * List with all satellites.\n   *\n   * @type {{}}\n   */\n  satellites = {}\n\n  /**\n   * Array with the initial satellites.\n   *\n   * @type {Array}\n   */\n  initialSatellites = []\n\n  /**\n   * Array with the load satellites.\n   *\n   * This array contains all the satellites who has a load method.\n   *\n   * @type {Array}\n   */\n  loadSatellites = []\n\n  /**\n   * Array with the start satellites.\n   *\n   * This array contains all the satellites who has a start method.\n   *\n   * @type {Array}\n   */\n  startSatellites = []\n\n  /**\n   * Array with the stop satellites.\n   *\n   * This array contains all the satellites who has a stop method.\n   *\n   * @type {Array}\n   */\n  stopSatellites = []\n\n  /**\n   * Create a new instance of the Engine.\n   *\n   * @param scope Initial scope\n   */\n  constructor (scope) {\n    let self = this\n\n    // save current execution scope\n    self.api.scope = scope\n\n    // save the engine reference for external calls\n    self.api._self = self\n\n    // define a dummy logger\n    //\n    // this only should print error, emergency levels\n    self.api.log = (msg, level = 'info') => {\n      // if we are on test environment don't use the console\n      if (process.env.NODE_ENV === 'test') { return }\n\n      if (level === 'emergency' || level === 'error') {\n        console.log(`\\x1b[31m[-] ${msg}\\x1b[37m`)\n      } else if (level === 'info') {\n        console.log(`[!] ${msg}`)\n      }\n    }\n\n    // define the available engine commands\n    self.api.commands = {\n      start: self.start,\n      stop: self.stop,\n      restart: self.restart\n    }\n  }\n\n  // ----------------------------------------------------------------------------------------- [State Manager Functions]\n\n  /**\n   * Start engine execution.\n   *\n   * @param callback This function is called when the Engine finish their startup.\n   */\n  start (callback = null) {\n    let self = this\n\n    // if this function has called outside of the Engine the 'this'\n    // variable has an invalid reference\n    if (this._self) { self = this._self }\n    self.api._self = self\n\n    // print current execution path\n    self.api.log(`Current universe \"${self.api.scope.rootPath}\"`, 'info')\n\n    // start stage0 loading method\n    self.stage0(callback)\n  }\n\n  /**\n   * Stop the Engine execution.\n   *\n   * This method try shutdown the engine in a non violent way, this\n   * starts to execute all the stop method on the supported satellites.\n   *\n   * @param callback Callback function to be executed at the stop end execution.\n   */\n  stop (callback = null) {\n    let self = this\n\n    // if this function has called outside of the Engine the 'this'\n    // variable has an invalid reference\n    if (this._self) { self = this._self }\n\n    if (self.api.running === true) {\n      // stop Engine\n      self.api.shuttingDown = true\n      self.api.running = false\n      self.api.initialized = false\n\n      // log a shutting down message\n      self.api.log('Shutting down open servers and stopping task processing', 'alert')\n\n      // if this is the second shutdown we need remove the `finalStopInitializer` callback\n      if (self.stopSatellites[ (self.stopSatellites.length - 1) ].name === 'finalStopInitializer') {\n        self.stopSatellites.pop()\n      }\n\n      // add the final callback\n      self.stopSatellites.push(function finalStopInitializer (next) {\n        // stop watch for file changes\n        self.api.configs.unwatchAllFiles()\n\n        // clear cluster PIDs\n        self.api.pids.clearPidFile()\n\n        // log a shutdown message\n        self.api.log('Stellar has been stopped', 'alert')\n        self.api.log('***', 'debug')\n\n        // execute the callback on the next tick\n        process.nextTick(() => {\n          if (callback !== null) { callback(null, self.api) }\n        })\n\n        // async callback\n        next()\n      })\n\n      // iterate all satellites and stop them\n      async.series(self.stopSatellites, errors => Engine.fatalError(self.api, errors, 'stop'))\n    } else if (self.api.shuttingDown === true) {\n      // double sigterm; ignore it\n    } else {\n      // we can shutdown the Engine if it is not running\n      self.api.log('Cannot shutdown Stellar, not running', 'error')\n\n      // exists a callback?\n      if (callback !== null) { callback(null, self.api) }\n    }\n  }\n\n  /**\n   * Restart the Stellar Engine.\n   *\n   * This execute a stop action and execute the stage2 load actions.\n   *\n   * @param callback Callback function to be executed at the restart end.s\n   */\n  restart (callback = null) {\n    let self = this\n\n    // if this function has called outside of the Engine the 'this'\n    // variable has an invalid reference\n    if (this._self) { self = this._self }\n\n    if (self.api.running === true) {\n      // stop the engine\n      self.stop(err => {\n        // log error if present\n        if (err) { self.api.log(err, 'error') }\n\n        // start the engine again\n        self.stage2(function (err) {\n          if (err) { self.api.log(err, 'error') }\n\n          // log a restart message\n          self.api.log('*** Stellar Restarted ***', 'info')\n\n          // exists a callback\n          if (callback !== null) { callback(null, self.api) }\n        })\n      })\n    } else {\n      self.stage2(err => {\n        // log any encountered error\n        if (err) { self.api.log(err, 'error') }\n\n        // log a restart message\n        self.api.log('*** Stellar Restarted ***', 'info')\n\n        // exists a callback\n        if (callback !== null) { callback(null, self.api) }\n      })\n    }\n  }\n\n  // ------------------------------------------------------------------------------------------------ [States Functions]\n\n  /**\n   * First startup stage.\n   *\n   * Steps:\n   *  - executes the initial satellites;\n   *  - call stage1\n   *\n   * @param callback This callback only are executed at the end of stage2.\n   */\n  stage0 (callback = null) {\n    let self = this\n\n    // we need to load the config first\n    let initialSatellites = [ path.resolve(__dirname + '/satellites/config.js') ]\n    initialSatellites.forEach(file => {\n      // get full file name\n      let filename = file.replace(/^.*[\\\\\\/]/, '')\n\n      // get the first part of the file name\n      let initializer = filename.split('.')[ 0 ]\n\n      // get the initializer\n      self.satellites[ initializer ] = new (require(file)).default()\n\n      // add it to array\n      self.initialSatellites.push(next => self.satellites[ initializer ].load(self.api, next))\n    })\n\n    // stage1 is called at the end of execution of all initial satellites\n    self.initialSatellites.push(() => self.stage1(callback))\n\n    // execute stage0 satellites in series\n    async.series(self.initialSatellites, error => Engine.fatalError(self.api, error, 'stage0'))\n  }\n\n  /**\n   * Second startup stage.\n   *\n   * Steps:\n   *  - load all satellites into memory;\n   *  - load satellites;\n   *  - mark Engine like initialized;\n   *  - call stage2.\n   *\n   * @param callback This callback only is executed at the stage2 end.\n   */\n  stage1 (callback = null) {\n    let self = this\n\n    // ranked object for all stages\n    let loadSatellitesRankings = {}\n    let startSatellitesRankings = {}\n    let stopSatellitesRankings = {}\n\n    // reset satellites arrays\n    self.satellites = {}\n\n    // function to load the satellites in the right place\n    let loadSatellitesInPlace = satellitesFiles => {\n      // iterate all files\n      for (let key in satellitesFiles) {\n        let f = satellitesFiles[ key ]\n\n        // get satellite normalized file name and\n        let file = path.normalize(f)\n        let initializer = path.basename(f).split('.')[ 0 ]\n        let ext = _.last(file.split('.'))\n\n        // only load files with the `.js` extension\n        if (ext !== 'js') { continue }\n\n        // get initializer module and instantiate it\n        self.satellites[ initializer ] = new (require(file).default)()\n\n        // initializer load function\n        let loadFunction = next => {\n          // check if the initializer have a load function\n          if (typeof self.satellites[ initializer ].load === 'function') {\n            self.api.log(` > load: ${initializer}`, 'debug')\n\n            // call `load` property\n            self.satellites[ initializer ].load(self.api, err => {\n              self.api.log(`   loaded: ${initializer}`, 'debug')\n              next(err)\n            })\n          } else {\n            next()\n          }\n        }\n\n        // initializer start function\n        let startFunction = next => {\n          // check if the initializer have a start function\n          if (typeof self.satellites[ initializer ].start === 'function') {\n            self.api.log(` > start: ${initializer}`, 'debug')\n\n            // execute start routine\n            self.satellites[ initializer ].start(self.api, err => {\n              self.api.log(`   started: ${initializer}`, 'debug')\n              next(err)\n            })\n          } else {\n            next()\n          }\n        }\n\n        // initializer stop function\n        let stopFunction = next => {\n          if (typeof  self.satellites[ initializer ].stop === 'function') {\n            self.api.log(` > stop: ${initializer}`, 'debug')\n\n            self.satellites[ initializer ].stop(self.api, err => {\n              self.api.log(`   stopped: ${initializer}`, 'debug')\n              next(err)\n            })\n          } else {\n            next()\n          }\n        }\n\n        // normalize satellite priorities\n        Engine.normalizeInitializerPriority(self.satellites[ initializer ])\n        loadSatellitesRankings[ self.satellites[ initializer ].loadPriority ] = loadSatellitesRankings[ self.satellites[ initializer ].loadPriority ] || []\n        startSatellitesRankings[ self.satellites[ initializer ].startPriority ] = startSatellitesRankings[ self.satellites[ initializer ].startPriority ] || []\n        stopSatellitesRankings[ self.satellites[ initializer ].stopPriority ] = stopSatellitesRankings[ self.satellites[ initializer ].stopPriority ] || []\n\n        // push loader state function to ranked arrays\n        loadSatellitesRankings[ self.satellites[ initializer ].loadPriority ].push(loadFunction)\n        startSatellitesRankings[ self.satellites[ initializer ].startPriority ].push(startFunction)\n        stopSatellitesRankings[ self.satellites[ initializer ].stopPriority ].push(stopFunction)\n      }\n    }\n\n    // get an array with all satellites\n    loadSatellitesInPlace(Utils.getFiles(__dirname + '/satellites'))\n\n    // load satellites from all the active modules\n    self.api.config.modules.forEach(moduleName => {\n      // build the full path to the satellites folder\n      let moduleSatellitePaths = `${self.api.scope.rootPath}/modules/${moduleName}/satellites`\n\n      // check if the folder exists\n      if (Utils.directoryExists(moduleSatellitePaths)) { loadSatellitesInPlace(Utils.getFiles(moduleSatellitePaths)) }\n    })\n\n    // organize final array to match the satellites priorities\n    self.loadSatellites = Engine.flattenOrderedInitializer(loadSatellitesRankings)\n    self.startSatellites = Engine.flattenOrderedInitializer(startSatellitesRankings)\n    self.stopSatellites = Engine.flattenOrderedInitializer(stopSatellitesRankings)\n\n    // on the end of loading all satellites set engine like initialized\n    self.loadSatellites.push(() => {\n      // mark engine like initialized\n      self.api.initialized = true\n\n      // call stage2\n      self.stage2(callback)\n    })\n\n    // start initialization process\n    async.series(self.loadSatellites, errors => Engine.fatalError(self.api, errors, 'stage0'))\n  }\n\n  /**\n   * Third startup stage.\n   *\n   * Steps:\n   *  - start satellites;\n   *  - mark Engine as running.\n   *\n   *  @param callback\n   */\n  stage2 (callback = null) {\n    let self = this\n\n    self.startSatellites.push(next => {\n      // define Stellar like running\n      self.api.running = true\n\n      self.api.bootTime = new Date().getTime()\n      self.api.log('** Server Started @ ' + new Date() + ' ***', 'notice')\n\n      // call the callback if it's present\n      if (callback !== null) { callback(null, self.api) }\n\n      next()\n    })\n\n    async.series(self.startSatellites, err => Engine.fatalError(self.api, err, 'stage2'))\n  }\n}\n"],"sourceRoot":"/source/"}