{"version":3,"sources":["servers/websocket.js"],"names":[],"mappings":"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","file":"servers/websocket.js","sourcesContent":["import fs from 'fs';\nimport util from 'util';\nimport path from 'path';\nimport Primus from 'primus';\nimport UglifyJS from 'uglify-js';\nimport GenericServer from '../genericServer';\nimport browser_fingerprint from 'browser_fingerprint';\n\n// server type\nlet type = 'websocket'\n\n// server attributes\nlet attributes = {\n  canChat: true,\n  logConnections: true,\n  logExists: true,\n  sendWelcomeMessage: true,\n  verbs: [\n    'quit',\n    'exit',\n    'roomAdd',\n    'roomLeave',\n    'roomView',\n    'detailsView',\n    'say'\n  ]\n}\n\nexport default class WebSocketServer extends GenericServer {\n\n  /**\n   * Server instance.\n   */\n  server\n\n  /**\n   * Creates a new server instance.\n   *\n   * @param api stellar engine interface.\n   * @param options sever options.\n   */\n  constructor (api, options) {\n    super(api, type, options, attributes)\n\n    let self = this\n\n    // connection event\n    self.on('connection', connection => {\n      connection.rawConnection.on('data', data => { self._handleData(connection, data) })\n    })\n\n    // action complete event\n    self.on('actionComplete', data => {\n      if (data.toRender !== false) {\n        data.connection.response.messageCount = data.messageCount\n        self.sendMessage(data.connection, data.response, data.messageCount)\n      }\n    })\n  }\n\n  // ------------------------------------------------------------------------------------------------ [REQUIRED METHODS]\n\n  /**\n   * Start the server\n   *\n   * @param callback\n   */\n  start (callback) {\n    let self = this\n    let webserver = self.api.servers.servers.web\n\n    // create a new primus instance\n    self.server = new Primus(webserver.server, self.api.config.servers.websocket.server)\n\n    // define some event handlers\n    self.server.on('connection', rawConnection => self._handleConnection(rawConnection))\n    self.server.on('disconnection', rawConnection => self._handleDisconnection(rawConnection))\n\n    self.api.log(`webSocket bound to ${webserver.options.bindIP}:${webserver.options.port}`, 'debug')\n    self.server.active = true\n\n    // write client js\n    self._writeClientJS()\n\n    // execute the callback\n    callback()\n  }\n\n  /**\n   * Shutdown the websocket server.\n   *\n   * @param callback Callback\n   */\n  stop (callback) {\n    let self = this;\n\n    // disable the server\n    self.active = false;\n\n    // destroy clients connections\n    if (self.api.config.servers.websocket.destroyClientOnShutdown === true) {\n      self.connections().forEach((connection) => {\n        connection.destroy();\n      });\n    }\n\n    // execute the callback on the next tick\n    process.nextTick(callback);\n  }\n\n  /**\n   * Send a message.\n   *\n   * @param connection      Connection where the message must be sent.\n   * @param message         Message to send.\n   * @param messageCount    Message number.\n   */\n  sendMessage (connection, message, messageCount) {\n    let self = this\n\n    // serialize the error if exists\n    if (message.error) {\n      message.error = self.api.config.errors.serializers.servers.websocket(message.error)\n    }\n\n    // if the message don't have a context set to 'response'\n    if (!message.context) { message.context = 'response' }\n\n    // if the messageCount isn't defined, get it from the connection object\n    if (!messageCount) { messageCount = connection.messageCount }\n\n    if (message.context === 'response' && !message.messageCount) { message.messageCount = messageCount }\n\n    // write the message to socket\n    connection.rawConnection.write(message)\n  }\n\n  /**\n   * Action to be executed on a file request.\n   *\n   * @param connection      Client connection object.\n   * @param error           Error, if exists.\n   * @param fileStream      FileStream.\n   * @param mime            Mime type.\n   * @param length          File size.\n   * @param lastModified    Last file modification timestamp.\n   */\n  sendFile (connection, error, fileStream, mime, length, lastModified) {\n    let self = this\n\n    let content = ''\n    let response = {\n      error: error,\n      content: null,\n      mime: mime,\n      length: length,\n      lastModified: lastModified\n    }\n\n    try {\n      if (!error) {\n        fileStream.on('data', d => { content += d })\n        fileStream.on('end', () => {\n          response.content = content\n          self.server.sendMessage(connection, response, connection.messageCount)\n        })\n      } else {\n        self.server.sendMessage(connection, response, connection.messageCount)\n      }\n    } catch (e) {\n      self.api.log(e, 'warning')\n      self.server.sendMessage(connection, response, connection.messageCount)\n    }\n  }\n\n  /**\n   * Action to be executed on the goodbye.\n   *\n   * @param connection Client connection to be closed.\n   */\n  goodbye (connection) { connection.rawConnection.end() }\n\n  //////////////////// [PRIVATE METHODS]\n\n  /**\n   * Compile client JS.\n   *\n   * @returns {*}\n   * @private\n   */\n  _compileClientJS () {\n    let self = this\n\n    let clientSource = fs.readFileSync(__dirname + '/../client.js').toString()\n    let url = self.api.config.servers.websocket.clientUrl\n\n    // replace any url by client url\n    clientSource = clientSource.replace(/\\'%%URL%%\\'/g, url)\n\n    let defaults = {}\n    for (var i in self.api.config.servers.websocket.client) {\n      defaults[ i ] = self.api.config.servers.websocket.client[ i ]\n    }\n    defaults.url = url\n\n    let defaultsString = util.inspect(defaults)\n    defaultsString = defaultsString.replace('\\'window.location.origin\\'', 'window.location.origin')\n    clientSource = clientSource.replace('\\'%%DEFAULTS%%\\'', defaultsString)\n\n    return clientSource\n  }\n\n  /**\n   * Render client JS.\n   *\n   * @param minimize\n   * @returns {*}\n   * @private\n   */\n  _renderClientJs (minimize = false) {\n    let self = this;\n\n    let libSource = self.api.servers.servers.websocket.server.library();\n    let clientSource = self._compileClientJS();\n\n    clientSource =\n      ';;;\\r\\n' +\n      '(function(exports){ \\r\\n' +\n      clientSource +\n      '\\r\\n' +\n      'exports.StellarClient = StellarClient; \\r\\n' +\n      '})(typeof exports === \\'undefined\\' ? window : exports);';\n\n    if (minimize) {\n      return UglifyJS.minify(`${libSource}\\r\\n\\r\\n\\r\\n${clientSource}`, {fromString: true}).code;\n    } else {\n      return `${libSource}\\r\\n\\r\\n\\r\\n${clientSource}`;\n    }\n  }\n\n  /**\n   * Write client js code.\n   */\n  _writeClientJS () {\n    let self = this;\n\n    if (self.api.config.servers.websocket.clientJsName) {\n      let base = path.normalize(\n        self.api.config.general.paths.temp + path.sep +\n        self.api.config.servers.websocket.clientJsName);\n\n      try {\n        fs.writeFileSync(`${base}.js`, self._renderClientJs(false));\n        self.api.log(`write ${base}.js`, 'debug');\n        fs.writeFileSync(`${base}.min.js`, self._renderClientJs(true));\n        self.api.log(`wrote ${base}.min.js`, 'debug');\n      } catch (e) {\n        self.api.log(`Cannot write client-side JS for websocket server:`, 'warning');\n        self.api.log(e, 'warning');\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * Handle connection.\n   *\n   * @param rawConnection   Raw connection object.\n   * @private\n   */\n  _handleConnection (rawConnection) {\n    let self = this\n\n    let parsedCookies = browser_fingerprint.parseCookies(rawConnection)\n    let fingerPrint = parsedCookies[ self.api.config.servers.web.fingerprintOptions.cookieKey ]\n\n    self.buildConnection({\n      rawConnection: rawConnection,\n      remoteAddress: rawConnection.address.ip,\n      remotePort: rawConnection.address.port,\n      fingerprint: fingerPrint\n    })\n  }\n\n  /**\n   * Handle the disconnection event.\n   *\n   * @param rawConnection\n   * @private\n   */\n  _handleDisconnection (rawConnection) {\n    let self = this\n\n    for (let i in self.connections()) {\n      if (self.connections()[ i ] && rawConnection.id == self.connections()[ i ].rawConnection.id) {\n        self.connections()[ i ].destroy()\n        break\n      }\n    }\n  }\n\n  _handleData (connection, data) {\n    let self = this\n\n    let verb = data.event\n    delete data.event\n\n    connection.messageCount++\n    connection.params = {}\n\n    switch (verb) {\n      case 'action':\n        for (let v in data.params) { connection.params[ v ] = data.params[ v ] }\n\n        connection.error = null\n        connection.response = {}\n        self.processAction(connection)\n        break\n\n      case 'file':\n        // setup the connection parameters\n        connection.params = {\n          file: data.file\n        }\n\n        // process the file request\n        self.processFile(connection)\n        break\n\n      default:\n        let words = []\n        let message\n\n        if (data.room) {\n          words.push(data.room)\n          delete data.room\n        }\n\n        for (let i in data) { words.push(data[ i ]) }\n\n        connection.verbs(verb, words, (error, data) => {\n          // if exists an error, send it to the client\n          if (error) {\n            message = {status: error, context: 'response', data: data}\n            self.sendMessage(connection, message)\n            return\n          }\n\n          message = {status: 'OK', context: 'response', data: data}\n          self.sendMessage(connection, message)\n        })\n        break\n    }\n  }\n}\n"],"sourceRoot":"/source/"}